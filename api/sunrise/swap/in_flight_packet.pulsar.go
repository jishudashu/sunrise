// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package swap

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_PacketIndex            protoreflect.MessageDescriptor
	fd_PacketIndex_port_id    protoreflect.FieldDescriptor
	fd_PacketIndex_channel_id protoreflect.FieldDescriptor
	fd_PacketIndex_sequence   protoreflect.FieldDescriptor
)

func init() {
	file_sunrise_swap_in_flight_packet_proto_init()
	md_PacketIndex = File_sunrise_swap_in_flight_packet_proto.Messages().ByName("PacketIndex")
	fd_PacketIndex_port_id = md_PacketIndex.Fields().ByName("port_id")
	fd_PacketIndex_channel_id = md_PacketIndex.Fields().ByName("channel_id")
	fd_PacketIndex_sequence = md_PacketIndex.Fields().ByName("sequence")
}

var _ protoreflect.Message = (*fastReflection_PacketIndex)(nil)

type fastReflection_PacketIndex PacketIndex

func (x *PacketIndex) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PacketIndex)(x)
}

func (x *PacketIndex) slowProtoReflect() protoreflect.Message {
	mi := &file_sunrise_swap_in_flight_packet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PacketIndex_messageType fastReflection_PacketIndex_messageType
var _ protoreflect.MessageType = fastReflection_PacketIndex_messageType{}

type fastReflection_PacketIndex_messageType struct{}

func (x fastReflection_PacketIndex_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PacketIndex)(nil)
}
func (x fastReflection_PacketIndex_messageType) New() protoreflect.Message {
	return new(fastReflection_PacketIndex)
}
func (x fastReflection_PacketIndex_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PacketIndex
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PacketIndex) Descriptor() protoreflect.MessageDescriptor {
	return md_PacketIndex
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PacketIndex) Type() protoreflect.MessageType {
	return _fastReflection_PacketIndex_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PacketIndex) New() protoreflect.Message {
	return new(fastReflection_PacketIndex)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PacketIndex) Interface() protoreflect.ProtoMessage {
	return (*PacketIndex)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PacketIndex) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PortId != "" {
		value := protoreflect.ValueOfString(x.PortId)
		if !f(fd_PacketIndex_port_id, value) {
			return
		}
	}
	if x.ChannelId != "" {
		value := protoreflect.ValueOfString(x.ChannelId)
		if !f(fd_PacketIndex_channel_id, value) {
			return
		}
	}
	if x.Sequence != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Sequence)
		if !f(fd_PacketIndex_sequence, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PacketIndex) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sunrise.swap.PacketIndex.port_id":
		return x.PortId != ""
	case "sunrise.swap.PacketIndex.channel_id":
		return x.ChannelId != ""
	case "sunrise.swap.PacketIndex.sequence":
		return x.Sequence != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.PacketIndex"))
		}
		panic(fmt.Errorf("message sunrise.swap.PacketIndex does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PacketIndex) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sunrise.swap.PacketIndex.port_id":
		x.PortId = ""
	case "sunrise.swap.PacketIndex.channel_id":
		x.ChannelId = ""
	case "sunrise.swap.PacketIndex.sequence":
		x.Sequence = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.PacketIndex"))
		}
		panic(fmt.Errorf("message sunrise.swap.PacketIndex does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PacketIndex) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sunrise.swap.PacketIndex.port_id":
		value := x.PortId
		return protoreflect.ValueOfString(value)
	case "sunrise.swap.PacketIndex.channel_id":
		value := x.ChannelId
		return protoreflect.ValueOfString(value)
	case "sunrise.swap.PacketIndex.sequence":
		value := x.Sequence
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.PacketIndex"))
		}
		panic(fmt.Errorf("message sunrise.swap.PacketIndex does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PacketIndex) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sunrise.swap.PacketIndex.port_id":
		x.PortId = value.Interface().(string)
	case "sunrise.swap.PacketIndex.channel_id":
		x.ChannelId = value.Interface().(string)
	case "sunrise.swap.PacketIndex.sequence":
		x.Sequence = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.PacketIndex"))
		}
		panic(fmt.Errorf("message sunrise.swap.PacketIndex does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PacketIndex) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.swap.PacketIndex.port_id":
		panic(fmt.Errorf("field port_id of message sunrise.swap.PacketIndex is not mutable"))
	case "sunrise.swap.PacketIndex.channel_id":
		panic(fmt.Errorf("field channel_id of message sunrise.swap.PacketIndex is not mutable"))
	case "sunrise.swap.PacketIndex.sequence":
		panic(fmt.Errorf("field sequence of message sunrise.swap.PacketIndex is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.PacketIndex"))
		}
		panic(fmt.Errorf("message sunrise.swap.PacketIndex does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PacketIndex) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.swap.PacketIndex.port_id":
		return protoreflect.ValueOfString("")
	case "sunrise.swap.PacketIndex.channel_id":
		return protoreflect.ValueOfString("")
	case "sunrise.swap.PacketIndex.sequence":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.PacketIndex"))
		}
		panic(fmt.Errorf("message sunrise.swap.PacketIndex does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PacketIndex) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sunrise.swap.PacketIndex", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PacketIndex) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PacketIndex) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PacketIndex) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PacketIndex) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PacketIndex)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.PortId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ChannelId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Sequence != 0 {
			n += 1 + runtime.Sov(uint64(x.Sequence))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PacketIndex)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Sequence != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Sequence))
			i--
			dAtA[i] = 0x18
		}
		if len(x.ChannelId) > 0 {
			i -= len(x.ChannelId)
			copy(dAtA[i:], x.ChannelId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ChannelId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.PortId) > 0 {
			i -= len(x.PortId)
			copy(dAtA[i:], x.PortId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PortId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PacketIndex)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PacketIndex: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PacketIndex: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PortId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChannelId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
				}
				x.Sequence = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Sequence |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_IncomingInFlightPacket                        protoreflect.MessageDescriptor
	fd_IncomingInFlightPacket_index                  protoreflect.FieldDescriptor
	fd_IncomingInFlightPacket_data                   protoreflect.FieldDescriptor
	fd_IncomingInFlightPacket_src_port_id            protoreflect.FieldDescriptor
	fd_IncomingInFlightPacket_src_channel_id         protoreflect.FieldDescriptor
	fd_IncomingInFlightPacket_timeout_height         protoreflect.FieldDescriptor
	fd_IncomingInFlightPacket_timeout_timestamp      protoreflect.FieldDescriptor
	fd_IncomingInFlightPacket_ack                    protoreflect.FieldDescriptor
	fd_IncomingInFlightPacket_result                 protoreflect.FieldDescriptor
	fd_IncomingInFlightPacket_interface_fee          protoreflect.FieldDescriptor
	fd_IncomingInFlightPacket_outgoing_index_change  protoreflect.FieldDescriptor
	fd_IncomingInFlightPacket_ack_change             protoreflect.FieldDescriptor
	fd_IncomingInFlightPacket_outgoing_index_forward protoreflect.FieldDescriptor
	fd_IncomingInFlightPacket_ack_forward            protoreflect.FieldDescriptor
)

func init() {
	file_sunrise_swap_in_flight_packet_proto_init()
	md_IncomingInFlightPacket = File_sunrise_swap_in_flight_packet_proto.Messages().ByName("IncomingInFlightPacket")
	fd_IncomingInFlightPacket_index = md_IncomingInFlightPacket.Fields().ByName("index")
	fd_IncomingInFlightPacket_data = md_IncomingInFlightPacket.Fields().ByName("data")
	fd_IncomingInFlightPacket_src_port_id = md_IncomingInFlightPacket.Fields().ByName("src_port_id")
	fd_IncomingInFlightPacket_src_channel_id = md_IncomingInFlightPacket.Fields().ByName("src_channel_id")
	fd_IncomingInFlightPacket_timeout_height = md_IncomingInFlightPacket.Fields().ByName("timeout_height")
	fd_IncomingInFlightPacket_timeout_timestamp = md_IncomingInFlightPacket.Fields().ByName("timeout_timestamp")
	fd_IncomingInFlightPacket_ack = md_IncomingInFlightPacket.Fields().ByName("ack")
	fd_IncomingInFlightPacket_result = md_IncomingInFlightPacket.Fields().ByName("result")
	fd_IncomingInFlightPacket_interface_fee = md_IncomingInFlightPacket.Fields().ByName("interface_fee")
	fd_IncomingInFlightPacket_outgoing_index_change = md_IncomingInFlightPacket.Fields().ByName("outgoing_index_change")
	fd_IncomingInFlightPacket_ack_change = md_IncomingInFlightPacket.Fields().ByName("ack_change")
	fd_IncomingInFlightPacket_outgoing_index_forward = md_IncomingInFlightPacket.Fields().ByName("outgoing_index_forward")
	fd_IncomingInFlightPacket_ack_forward = md_IncomingInFlightPacket.Fields().ByName("ack_forward")
}

var _ protoreflect.Message = (*fastReflection_IncomingInFlightPacket)(nil)

type fastReflection_IncomingInFlightPacket IncomingInFlightPacket

func (x *IncomingInFlightPacket) ProtoReflect() protoreflect.Message {
	return (*fastReflection_IncomingInFlightPacket)(x)
}

func (x *IncomingInFlightPacket) slowProtoReflect() protoreflect.Message {
	mi := &file_sunrise_swap_in_flight_packet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_IncomingInFlightPacket_messageType fastReflection_IncomingInFlightPacket_messageType
var _ protoreflect.MessageType = fastReflection_IncomingInFlightPacket_messageType{}

type fastReflection_IncomingInFlightPacket_messageType struct{}

func (x fastReflection_IncomingInFlightPacket_messageType) Zero() protoreflect.Message {
	return (*fastReflection_IncomingInFlightPacket)(nil)
}
func (x fastReflection_IncomingInFlightPacket_messageType) New() protoreflect.Message {
	return new(fastReflection_IncomingInFlightPacket)
}
func (x fastReflection_IncomingInFlightPacket_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_IncomingInFlightPacket
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_IncomingInFlightPacket) Descriptor() protoreflect.MessageDescriptor {
	return md_IncomingInFlightPacket
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_IncomingInFlightPacket) Type() protoreflect.MessageType {
	return _fastReflection_IncomingInFlightPacket_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_IncomingInFlightPacket) New() protoreflect.Message {
	return new(fastReflection_IncomingInFlightPacket)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_IncomingInFlightPacket) Interface() protoreflect.ProtoMessage {
	return (*IncomingInFlightPacket)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_IncomingInFlightPacket) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != nil {
		value := protoreflect.ValueOfMessage(x.Index.ProtoReflect())
		if !f(fd_IncomingInFlightPacket_index, value) {
			return
		}
	}
	if len(x.Data) != 0 {
		value := protoreflect.ValueOfBytes(x.Data)
		if !f(fd_IncomingInFlightPacket_data, value) {
			return
		}
	}
	if x.SrcPortId != "" {
		value := protoreflect.ValueOfString(x.SrcPortId)
		if !f(fd_IncomingInFlightPacket_src_port_id, value) {
			return
		}
	}
	if x.SrcChannelId != "" {
		value := protoreflect.ValueOfString(x.SrcChannelId)
		if !f(fd_IncomingInFlightPacket_src_channel_id, value) {
			return
		}
	}
	if x.TimeoutHeight != "" {
		value := protoreflect.ValueOfString(x.TimeoutHeight)
		if !f(fd_IncomingInFlightPacket_timeout_height, value) {
			return
		}
	}
	if x.TimeoutTimestamp != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TimeoutTimestamp)
		if !f(fd_IncomingInFlightPacket_timeout_timestamp, value) {
			return
		}
	}
	if len(x.Ack) != 0 {
		value := protoreflect.ValueOfBytes(x.Ack)
		if !f(fd_IncomingInFlightPacket_ack, value) {
			return
		}
	}
	if x.Result != nil {
		value := protoreflect.ValueOfMessage(x.Result.ProtoReflect())
		if !f(fd_IncomingInFlightPacket_result, value) {
			return
		}
	}
	if x.InterfaceFee != "" {
		value := protoreflect.ValueOfString(x.InterfaceFee)
		if !f(fd_IncomingInFlightPacket_interface_fee, value) {
			return
		}
	}
	if x.Change != nil {
		switch o := x.Change.(type) {
		case *IncomingInFlightPacket_OutgoingIndexChange:
			v := o.OutgoingIndexChange
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_IncomingInFlightPacket_outgoing_index_change, value) {
				return
			}
		case *IncomingInFlightPacket_AckChange:
			v := o.AckChange
			value := protoreflect.ValueOfBytes(v)
			if !f(fd_IncomingInFlightPacket_ack_change, value) {
				return
			}
		}
	}
	if x.Forward != nil {
		switch o := x.Forward.(type) {
		case *IncomingInFlightPacket_OutgoingIndexForward:
			v := o.OutgoingIndexForward
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_IncomingInFlightPacket_outgoing_index_forward, value) {
				return
			}
		case *IncomingInFlightPacket_AckForward:
			v := o.AckForward
			value := protoreflect.ValueOfBytes(v)
			if !f(fd_IncomingInFlightPacket_ack_forward, value) {
				return
			}
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_IncomingInFlightPacket) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sunrise.swap.IncomingInFlightPacket.index":
		return x.Index != nil
	case "sunrise.swap.IncomingInFlightPacket.data":
		return len(x.Data) != 0
	case "sunrise.swap.IncomingInFlightPacket.src_port_id":
		return x.SrcPortId != ""
	case "sunrise.swap.IncomingInFlightPacket.src_channel_id":
		return x.SrcChannelId != ""
	case "sunrise.swap.IncomingInFlightPacket.timeout_height":
		return x.TimeoutHeight != ""
	case "sunrise.swap.IncomingInFlightPacket.timeout_timestamp":
		return x.TimeoutTimestamp != uint64(0)
	case "sunrise.swap.IncomingInFlightPacket.ack":
		return len(x.Ack) != 0
	case "sunrise.swap.IncomingInFlightPacket.result":
		return x.Result != nil
	case "sunrise.swap.IncomingInFlightPacket.interface_fee":
		return x.InterfaceFee != ""
	case "sunrise.swap.IncomingInFlightPacket.outgoing_index_change":
		if x.Change == nil {
			return false
		} else if _, ok := x.Change.(*IncomingInFlightPacket_OutgoingIndexChange); ok {
			return true
		} else {
			return false
		}
	case "sunrise.swap.IncomingInFlightPacket.ack_change":
		if x.Change == nil {
			return false
		} else if _, ok := x.Change.(*IncomingInFlightPacket_AckChange); ok {
			return true
		} else {
			return false
		}
	case "sunrise.swap.IncomingInFlightPacket.outgoing_index_forward":
		if x.Forward == nil {
			return false
		} else if _, ok := x.Forward.(*IncomingInFlightPacket_OutgoingIndexForward); ok {
			return true
		} else {
			return false
		}
	case "sunrise.swap.IncomingInFlightPacket.ack_forward":
		if x.Forward == nil {
			return false
		} else if _, ok := x.Forward.(*IncomingInFlightPacket_AckForward); ok {
			return true
		} else {
			return false
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.IncomingInFlightPacket"))
		}
		panic(fmt.Errorf("message sunrise.swap.IncomingInFlightPacket does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IncomingInFlightPacket) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sunrise.swap.IncomingInFlightPacket.index":
		x.Index = nil
	case "sunrise.swap.IncomingInFlightPacket.data":
		x.Data = nil
	case "sunrise.swap.IncomingInFlightPacket.src_port_id":
		x.SrcPortId = ""
	case "sunrise.swap.IncomingInFlightPacket.src_channel_id":
		x.SrcChannelId = ""
	case "sunrise.swap.IncomingInFlightPacket.timeout_height":
		x.TimeoutHeight = ""
	case "sunrise.swap.IncomingInFlightPacket.timeout_timestamp":
		x.TimeoutTimestamp = uint64(0)
	case "sunrise.swap.IncomingInFlightPacket.ack":
		x.Ack = nil
	case "sunrise.swap.IncomingInFlightPacket.result":
		x.Result = nil
	case "sunrise.swap.IncomingInFlightPacket.interface_fee":
		x.InterfaceFee = ""
	case "sunrise.swap.IncomingInFlightPacket.outgoing_index_change":
		x.Change = nil
	case "sunrise.swap.IncomingInFlightPacket.ack_change":
		x.Change = nil
	case "sunrise.swap.IncomingInFlightPacket.outgoing_index_forward":
		x.Forward = nil
	case "sunrise.swap.IncomingInFlightPacket.ack_forward":
		x.Forward = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.IncomingInFlightPacket"))
		}
		panic(fmt.Errorf("message sunrise.swap.IncomingInFlightPacket does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_IncomingInFlightPacket) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sunrise.swap.IncomingInFlightPacket.index":
		value := x.Index
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sunrise.swap.IncomingInFlightPacket.data":
		value := x.Data
		return protoreflect.ValueOfBytes(value)
	case "sunrise.swap.IncomingInFlightPacket.src_port_id":
		value := x.SrcPortId
		return protoreflect.ValueOfString(value)
	case "sunrise.swap.IncomingInFlightPacket.src_channel_id":
		value := x.SrcChannelId
		return protoreflect.ValueOfString(value)
	case "sunrise.swap.IncomingInFlightPacket.timeout_height":
		value := x.TimeoutHeight
		return protoreflect.ValueOfString(value)
	case "sunrise.swap.IncomingInFlightPacket.timeout_timestamp":
		value := x.TimeoutTimestamp
		return protoreflect.ValueOfUint64(value)
	case "sunrise.swap.IncomingInFlightPacket.ack":
		value := x.Ack
		return protoreflect.ValueOfBytes(value)
	case "sunrise.swap.IncomingInFlightPacket.result":
		value := x.Result
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sunrise.swap.IncomingInFlightPacket.interface_fee":
		value := x.InterfaceFee
		return protoreflect.ValueOfString(value)
	case "sunrise.swap.IncomingInFlightPacket.outgoing_index_change":
		if x.Change == nil {
			return protoreflect.ValueOfMessage((*PacketIndex)(nil).ProtoReflect())
		} else if v, ok := x.Change.(*IncomingInFlightPacket_OutgoingIndexChange); ok {
			return protoreflect.ValueOfMessage(v.OutgoingIndexChange.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*PacketIndex)(nil).ProtoReflect())
		}
	case "sunrise.swap.IncomingInFlightPacket.ack_change":
		if x.Change == nil {
			return protoreflect.ValueOfBytes(nil)
		} else if v, ok := x.Change.(*IncomingInFlightPacket_AckChange); ok {
			return protoreflect.ValueOfBytes(v.AckChange)
		} else {
			return protoreflect.ValueOfBytes(nil)
		}
	case "sunrise.swap.IncomingInFlightPacket.outgoing_index_forward":
		if x.Forward == nil {
			return protoreflect.ValueOfMessage((*PacketIndex)(nil).ProtoReflect())
		} else if v, ok := x.Forward.(*IncomingInFlightPacket_OutgoingIndexForward); ok {
			return protoreflect.ValueOfMessage(v.OutgoingIndexForward.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*PacketIndex)(nil).ProtoReflect())
		}
	case "sunrise.swap.IncomingInFlightPacket.ack_forward":
		if x.Forward == nil {
			return protoreflect.ValueOfBytes(nil)
		} else if v, ok := x.Forward.(*IncomingInFlightPacket_AckForward); ok {
			return protoreflect.ValueOfBytes(v.AckForward)
		} else {
			return protoreflect.ValueOfBytes(nil)
		}
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.IncomingInFlightPacket"))
		}
		panic(fmt.Errorf("message sunrise.swap.IncomingInFlightPacket does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IncomingInFlightPacket) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sunrise.swap.IncomingInFlightPacket.index":
		x.Index = value.Message().Interface().(*PacketIndex)
	case "sunrise.swap.IncomingInFlightPacket.data":
		x.Data = value.Bytes()
	case "sunrise.swap.IncomingInFlightPacket.src_port_id":
		x.SrcPortId = value.Interface().(string)
	case "sunrise.swap.IncomingInFlightPacket.src_channel_id":
		x.SrcChannelId = value.Interface().(string)
	case "sunrise.swap.IncomingInFlightPacket.timeout_height":
		x.TimeoutHeight = value.Interface().(string)
	case "sunrise.swap.IncomingInFlightPacket.timeout_timestamp":
		x.TimeoutTimestamp = value.Uint()
	case "sunrise.swap.IncomingInFlightPacket.ack":
		x.Ack = value.Bytes()
	case "sunrise.swap.IncomingInFlightPacket.result":
		x.Result = value.Message().Interface().(*RouteResult)
	case "sunrise.swap.IncomingInFlightPacket.interface_fee":
		x.InterfaceFee = value.Interface().(string)
	case "sunrise.swap.IncomingInFlightPacket.outgoing_index_change":
		cv := value.Message().Interface().(*PacketIndex)
		x.Change = &IncomingInFlightPacket_OutgoingIndexChange{OutgoingIndexChange: cv}
	case "sunrise.swap.IncomingInFlightPacket.ack_change":
		cv := value.Bytes()
		x.Change = &IncomingInFlightPacket_AckChange{AckChange: cv}
	case "sunrise.swap.IncomingInFlightPacket.outgoing_index_forward":
		cv := value.Message().Interface().(*PacketIndex)
		x.Forward = &IncomingInFlightPacket_OutgoingIndexForward{OutgoingIndexForward: cv}
	case "sunrise.swap.IncomingInFlightPacket.ack_forward":
		cv := value.Bytes()
		x.Forward = &IncomingInFlightPacket_AckForward{AckForward: cv}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.IncomingInFlightPacket"))
		}
		panic(fmt.Errorf("message sunrise.swap.IncomingInFlightPacket does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IncomingInFlightPacket) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.swap.IncomingInFlightPacket.index":
		if x.Index == nil {
			x.Index = new(PacketIndex)
		}
		return protoreflect.ValueOfMessage(x.Index.ProtoReflect())
	case "sunrise.swap.IncomingInFlightPacket.result":
		if x.Result == nil {
			x.Result = new(RouteResult)
		}
		return protoreflect.ValueOfMessage(x.Result.ProtoReflect())
	case "sunrise.swap.IncomingInFlightPacket.outgoing_index_change":
		if x.Change == nil {
			value := &PacketIndex{}
			oneofValue := &IncomingInFlightPacket_OutgoingIndexChange{OutgoingIndexChange: value}
			x.Change = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Change.(type) {
		case *IncomingInFlightPacket_OutgoingIndexChange:
			return protoreflect.ValueOfMessage(m.OutgoingIndexChange.ProtoReflect())
		default:
			value := &PacketIndex{}
			oneofValue := &IncomingInFlightPacket_OutgoingIndexChange{OutgoingIndexChange: value}
			x.Change = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "sunrise.swap.IncomingInFlightPacket.outgoing_index_forward":
		if x.Forward == nil {
			value := &PacketIndex{}
			oneofValue := &IncomingInFlightPacket_OutgoingIndexForward{OutgoingIndexForward: value}
			x.Forward = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Forward.(type) {
		case *IncomingInFlightPacket_OutgoingIndexForward:
			return protoreflect.ValueOfMessage(m.OutgoingIndexForward.ProtoReflect())
		default:
			value := &PacketIndex{}
			oneofValue := &IncomingInFlightPacket_OutgoingIndexForward{OutgoingIndexForward: value}
			x.Forward = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "sunrise.swap.IncomingInFlightPacket.data":
		panic(fmt.Errorf("field data of message sunrise.swap.IncomingInFlightPacket is not mutable"))
	case "sunrise.swap.IncomingInFlightPacket.src_port_id":
		panic(fmt.Errorf("field src_port_id of message sunrise.swap.IncomingInFlightPacket is not mutable"))
	case "sunrise.swap.IncomingInFlightPacket.src_channel_id":
		panic(fmt.Errorf("field src_channel_id of message sunrise.swap.IncomingInFlightPacket is not mutable"))
	case "sunrise.swap.IncomingInFlightPacket.timeout_height":
		panic(fmt.Errorf("field timeout_height of message sunrise.swap.IncomingInFlightPacket is not mutable"))
	case "sunrise.swap.IncomingInFlightPacket.timeout_timestamp":
		panic(fmt.Errorf("field timeout_timestamp of message sunrise.swap.IncomingInFlightPacket is not mutable"))
	case "sunrise.swap.IncomingInFlightPacket.ack":
		panic(fmt.Errorf("field ack of message sunrise.swap.IncomingInFlightPacket is not mutable"))
	case "sunrise.swap.IncomingInFlightPacket.interface_fee":
		panic(fmt.Errorf("field interface_fee of message sunrise.swap.IncomingInFlightPacket is not mutable"))
	case "sunrise.swap.IncomingInFlightPacket.ack_change":
		panic(fmt.Errorf("field ack_change of message sunrise.swap.IncomingInFlightPacket is not mutable"))
	case "sunrise.swap.IncomingInFlightPacket.ack_forward":
		panic(fmt.Errorf("field ack_forward of message sunrise.swap.IncomingInFlightPacket is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.IncomingInFlightPacket"))
		}
		panic(fmt.Errorf("message sunrise.swap.IncomingInFlightPacket does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_IncomingInFlightPacket) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.swap.IncomingInFlightPacket.index":
		m := new(PacketIndex)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sunrise.swap.IncomingInFlightPacket.data":
		return protoreflect.ValueOfBytes(nil)
	case "sunrise.swap.IncomingInFlightPacket.src_port_id":
		return protoreflect.ValueOfString("")
	case "sunrise.swap.IncomingInFlightPacket.src_channel_id":
		return protoreflect.ValueOfString("")
	case "sunrise.swap.IncomingInFlightPacket.timeout_height":
		return protoreflect.ValueOfString("")
	case "sunrise.swap.IncomingInFlightPacket.timeout_timestamp":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sunrise.swap.IncomingInFlightPacket.ack":
		return protoreflect.ValueOfBytes(nil)
	case "sunrise.swap.IncomingInFlightPacket.result":
		m := new(RouteResult)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sunrise.swap.IncomingInFlightPacket.interface_fee":
		return protoreflect.ValueOfString("")
	case "sunrise.swap.IncomingInFlightPacket.outgoing_index_change":
		value := &PacketIndex{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sunrise.swap.IncomingInFlightPacket.ack_change":
		return protoreflect.ValueOfBytes(nil)
	case "sunrise.swap.IncomingInFlightPacket.outgoing_index_forward":
		value := &PacketIndex{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sunrise.swap.IncomingInFlightPacket.ack_forward":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.IncomingInFlightPacket"))
		}
		panic(fmt.Errorf("message sunrise.swap.IncomingInFlightPacket does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_IncomingInFlightPacket) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "sunrise.swap.IncomingInFlightPacket.change":
		if x.Change == nil {
			return nil
		}
		switch x.Change.(type) {
		case *IncomingInFlightPacket_OutgoingIndexChange:
			return x.Descriptor().Fields().ByName("outgoing_index_change")
		case *IncomingInFlightPacket_AckChange:
			return x.Descriptor().Fields().ByName("ack_change")
		}
	case "sunrise.swap.IncomingInFlightPacket.forward":
		if x.Forward == nil {
			return nil
		}
		switch x.Forward.(type) {
		case *IncomingInFlightPacket_OutgoingIndexForward:
			return x.Descriptor().Fields().ByName("outgoing_index_forward")
		case *IncomingInFlightPacket_AckForward:
			return x.Descriptor().Fields().ByName("ack_forward")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in sunrise.swap.IncomingInFlightPacket", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_IncomingInFlightPacket) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IncomingInFlightPacket) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_IncomingInFlightPacket) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_IncomingInFlightPacket) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*IncomingInFlightPacket)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Index != nil {
			l = options.Size(x.Index)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Data)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SrcPortId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SrcChannelId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TimeoutHeight)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TimeoutTimestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.TimeoutTimestamp))
		}
		l = len(x.Ack)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Result != nil {
			l = options.Size(x.Result)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InterfaceFee)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		switch x := x.Change.(type) {
		case *IncomingInFlightPacket_OutgoingIndexChange:
			if x == nil {
				break
			}
			l = options.Size(x.OutgoingIndexChange)
			n += 1 + l + runtime.Sov(uint64(l))
		case *IncomingInFlightPacket_AckChange:
			if x == nil {
				break
			}
			l = len(x.AckChange)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		switch x := x.Forward.(type) {
		case *IncomingInFlightPacket_OutgoingIndexForward:
			if x == nil {
				break
			}
			l = options.Size(x.OutgoingIndexForward)
			n += 1 + l + runtime.Sov(uint64(l))
		case *IncomingInFlightPacket_AckForward:
			if x == nil {
				break
			}
			l = len(x.AckForward)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*IncomingInFlightPacket)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Forward.(type) {
		case *IncomingInFlightPacket_OutgoingIndexForward:
			encoded, err := options.Marshal(x.OutgoingIndexForward)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		case *IncomingInFlightPacket_AckForward:
			i -= len(x.AckForward)
			copy(dAtA[i:], x.AckForward)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AckForward)))
			i--
			dAtA[i] = 0x6a
		}
		switch x := x.Change.(type) {
		case *IncomingInFlightPacket_OutgoingIndexChange:
			encoded, err := options.Marshal(x.OutgoingIndexChange)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x52
		case *IncomingInFlightPacket_AckChange:
			i -= len(x.AckChange)
			copy(dAtA[i:], x.AckChange)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AckChange)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.InterfaceFee) > 0 {
			i -= len(x.InterfaceFee)
			copy(dAtA[i:], x.InterfaceFee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InterfaceFee)))
			i--
			dAtA[i] = 0x4a
		}
		if x.Result != nil {
			encoded, err := options.Marshal(x.Result)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.Ack) > 0 {
			i -= len(x.Ack)
			copy(dAtA[i:], x.Ack)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Ack)))
			i--
			dAtA[i] = 0x3a
		}
		if x.TimeoutTimestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TimeoutTimestamp))
			i--
			dAtA[i] = 0x30
		}
		if len(x.TimeoutHeight) > 0 {
			i -= len(x.TimeoutHeight)
			copy(dAtA[i:], x.TimeoutHeight)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TimeoutHeight)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.SrcChannelId) > 0 {
			i -= len(x.SrcChannelId)
			copy(dAtA[i:], x.SrcChannelId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SrcChannelId)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.SrcPortId) > 0 {
			i -= len(x.SrcPortId)
			copy(dAtA[i:], x.SrcPortId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SrcPortId)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Data) > 0 {
			i -= len(x.Data)
			copy(dAtA[i:], x.Data)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Data)))
			i--
			dAtA[i] = 0x12
		}
		if x.Index != nil {
			encoded, err := options.Marshal(x.Index)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*IncomingInFlightPacket)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: IncomingInFlightPacket: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: IncomingInFlightPacket: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Index == nil {
					x.Index = &PacketIndex{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Index); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Data = append(x.Data[:0], dAtA[iNdEx:postIndex]...)
				if x.Data == nil {
					x.Data = []byte{}
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SrcPortId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SrcPortId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SrcChannelId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SrcChannelId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TimeoutHeight = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
				}
				x.TimeoutTimestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TimeoutTimestamp |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Ack = append(x.Ack[:0], dAtA[iNdEx:postIndex]...)
				if x.Ack == nil {
					x.Ack = []byte{}
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Result == nil {
					x.Result = &RouteResult{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Result); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InterfaceFee", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InterfaceFee = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OutgoingIndexChange", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &PacketIndex{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Change = &IncomingInFlightPacket_OutgoingIndexChange{v}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AckChange", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := make([]byte, postIndex-iNdEx)
				copy(v, dAtA[iNdEx:postIndex])
				x.Change = &IncomingInFlightPacket_AckChange{v}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OutgoingIndexForward", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &PacketIndex{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Forward = &IncomingInFlightPacket_OutgoingIndexForward{v}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AckForward", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := make([]byte, postIndex-iNdEx)
				copy(v, dAtA[iNdEx:postIndex])
				x.Forward = &IncomingInFlightPacket_AckForward{v}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_OutgoingInFlightPacket                   protoreflect.MessageDescriptor
	fd_OutgoingInFlightPacket_index             protoreflect.FieldDescriptor
	fd_OutgoingInFlightPacket_ack_waiting_index protoreflect.FieldDescriptor
	fd_OutgoingInFlightPacket_retries_remaining protoreflect.FieldDescriptor
)

func init() {
	file_sunrise_swap_in_flight_packet_proto_init()
	md_OutgoingInFlightPacket = File_sunrise_swap_in_flight_packet_proto.Messages().ByName("OutgoingInFlightPacket")
	fd_OutgoingInFlightPacket_index = md_OutgoingInFlightPacket.Fields().ByName("index")
	fd_OutgoingInFlightPacket_ack_waiting_index = md_OutgoingInFlightPacket.Fields().ByName("ack_waiting_index")
	fd_OutgoingInFlightPacket_retries_remaining = md_OutgoingInFlightPacket.Fields().ByName("retries_remaining")
}

var _ protoreflect.Message = (*fastReflection_OutgoingInFlightPacket)(nil)

type fastReflection_OutgoingInFlightPacket OutgoingInFlightPacket

func (x *OutgoingInFlightPacket) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OutgoingInFlightPacket)(x)
}

func (x *OutgoingInFlightPacket) slowProtoReflect() protoreflect.Message {
	mi := &file_sunrise_swap_in_flight_packet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OutgoingInFlightPacket_messageType fastReflection_OutgoingInFlightPacket_messageType
var _ protoreflect.MessageType = fastReflection_OutgoingInFlightPacket_messageType{}

type fastReflection_OutgoingInFlightPacket_messageType struct{}

func (x fastReflection_OutgoingInFlightPacket_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OutgoingInFlightPacket)(nil)
}
func (x fastReflection_OutgoingInFlightPacket_messageType) New() protoreflect.Message {
	return new(fastReflection_OutgoingInFlightPacket)
}
func (x fastReflection_OutgoingInFlightPacket_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OutgoingInFlightPacket
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OutgoingInFlightPacket) Descriptor() protoreflect.MessageDescriptor {
	return md_OutgoingInFlightPacket
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OutgoingInFlightPacket) Type() protoreflect.MessageType {
	return _fastReflection_OutgoingInFlightPacket_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OutgoingInFlightPacket) New() protoreflect.Message {
	return new(fastReflection_OutgoingInFlightPacket)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OutgoingInFlightPacket) Interface() protoreflect.ProtoMessage {
	return (*OutgoingInFlightPacket)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OutgoingInFlightPacket) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != nil {
		value := protoreflect.ValueOfMessage(x.Index.ProtoReflect())
		if !f(fd_OutgoingInFlightPacket_index, value) {
			return
		}
	}
	if x.AckWaitingIndex != nil {
		value := protoreflect.ValueOfMessage(x.AckWaitingIndex.ProtoReflect())
		if !f(fd_OutgoingInFlightPacket_ack_waiting_index, value) {
			return
		}
	}
	if x.RetriesRemaining != int32(0) {
		value := protoreflect.ValueOfInt32(x.RetriesRemaining)
		if !f(fd_OutgoingInFlightPacket_retries_remaining, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OutgoingInFlightPacket) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sunrise.swap.OutgoingInFlightPacket.index":
		return x.Index != nil
	case "sunrise.swap.OutgoingInFlightPacket.ack_waiting_index":
		return x.AckWaitingIndex != nil
	case "sunrise.swap.OutgoingInFlightPacket.retries_remaining":
		return x.RetriesRemaining != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.OutgoingInFlightPacket"))
		}
		panic(fmt.Errorf("message sunrise.swap.OutgoingInFlightPacket does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutgoingInFlightPacket) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sunrise.swap.OutgoingInFlightPacket.index":
		x.Index = nil
	case "sunrise.swap.OutgoingInFlightPacket.ack_waiting_index":
		x.AckWaitingIndex = nil
	case "sunrise.swap.OutgoingInFlightPacket.retries_remaining":
		x.RetriesRemaining = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.OutgoingInFlightPacket"))
		}
		panic(fmt.Errorf("message sunrise.swap.OutgoingInFlightPacket does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OutgoingInFlightPacket) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sunrise.swap.OutgoingInFlightPacket.index":
		value := x.Index
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sunrise.swap.OutgoingInFlightPacket.ack_waiting_index":
		value := x.AckWaitingIndex
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sunrise.swap.OutgoingInFlightPacket.retries_remaining":
		value := x.RetriesRemaining
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.OutgoingInFlightPacket"))
		}
		panic(fmt.Errorf("message sunrise.swap.OutgoingInFlightPacket does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutgoingInFlightPacket) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sunrise.swap.OutgoingInFlightPacket.index":
		x.Index = value.Message().Interface().(*PacketIndex)
	case "sunrise.swap.OutgoingInFlightPacket.ack_waiting_index":
		x.AckWaitingIndex = value.Message().Interface().(*PacketIndex)
	case "sunrise.swap.OutgoingInFlightPacket.retries_remaining":
		x.RetriesRemaining = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.OutgoingInFlightPacket"))
		}
		panic(fmt.Errorf("message sunrise.swap.OutgoingInFlightPacket does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutgoingInFlightPacket) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.swap.OutgoingInFlightPacket.index":
		if x.Index == nil {
			x.Index = new(PacketIndex)
		}
		return protoreflect.ValueOfMessage(x.Index.ProtoReflect())
	case "sunrise.swap.OutgoingInFlightPacket.ack_waiting_index":
		if x.AckWaitingIndex == nil {
			x.AckWaitingIndex = new(PacketIndex)
		}
		return protoreflect.ValueOfMessage(x.AckWaitingIndex.ProtoReflect())
	case "sunrise.swap.OutgoingInFlightPacket.retries_remaining":
		panic(fmt.Errorf("field retries_remaining of message sunrise.swap.OutgoingInFlightPacket is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.OutgoingInFlightPacket"))
		}
		panic(fmt.Errorf("message sunrise.swap.OutgoingInFlightPacket does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OutgoingInFlightPacket) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.swap.OutgoingInFlightPacket.index":
		m := new(PacketIndex)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sunrise.swap.OutgoingInFlightPacket.ack_waiting_index":
		m := new(PacketIndex)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sunrise.swap.OutgoingInFlightPacket.retries_remaining":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.swap.OutgoingInFlightPacket"))
		}
		panic(fmt.Errorf("message sunrise.swap.OutgoingInFlightPacket does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OutgoingInFlightPacket) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sunrise.swap.OutgoingInFlightPacket", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OutgoingInFlightPacket) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutgoingInFlightPacket) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OutgoingInFlightPacket) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OutgoingInFlightPacket) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OutgoingInFlightPacket)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Index != nil {
			l = options.Size(x.Index)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AckWaitingIndex != nil {
			l = options.Size(x.AckWaitingIndex)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RetriesRemaining != 0 {
			n += 1 + runtime.Sov(uint64(x.RetriesRemaining))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OutgoingInFlightPacket)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.RetriesRemaining != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RetriesRemaining))
			i--
			dAtA[i] = 0x18
		}
		if x.AckWaitingIndex != nil {
			encoded, err := options.Marshal(x.AckWaitingIndex)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Index != nil {
			encoded, err := options.Marshal(x.Index)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OutgoingInFlightPacket)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OutgoingInFlightPacket: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OutgoingInFlightPacket: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Index == nil {
					x.Index = &PacketIndex{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Index); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AckWaitingIndex", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.AckWaitingIndex == nil {
					x.AckWaitingIndex = &PacketIndex{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AckWaitingIndex); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RetriesRemaining", wireType)
				}
				x.RetriesRemaining = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RetriesRemaining |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sunrise/swap/in_flight_packet.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PacketIndex
type PacketIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId    string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Sequence  uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *PacketIndex) Reset() {
	*x = PacketIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sunrise_swap_in_flight_packet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketIndex) ProtoMessage() {}

// Deprecated: Use PacketIndex.ProtoReflect.Descriptor instead.
func (*PacketIndex) Descriptor() ([]byte, []int) {
	return file_sunrise_swap_in_flight_packet_proto_rawDescGZIP(), []int{0}
}

func (x *PacketIndex) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *PacketIndex) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *PacketIndex) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// IncomingInFlightPacket
type IncomingInFlightPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index            *PacketIndex `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Data             []byte       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	SrcPortId        string       `protobuf:"bytes,3,opt,name=src_port_id,json=srcPortId,proto3" json:"src_port_id,omitempty"`
	SrcChannelId     string       `protobuf:"bytes,4,opt,name=src_channel_id,json=srcChannelId,proto3" json:"src_channel_id,omitempty"`
	TimeoutHeight    string       `protobuf:"bytes,5,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height,omitempty"`
	TimeoutTimestamp uint64       `protobuf:"varint,6,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty"`
	Ack              []byte       `protobuf:"bytes,7,opt,name=ack,proto3" json:"ack,omitempty"`
	Result           *RouteResult `protobuf:"bytes,8,opt,name=result,proto3" json:"result,omitempty"`
	InterfaceFee     string       `protobuf:"bytes,9,opt,name=interface_fee,json=interfaceFee,proto3" json:"interface_fee,omitempty"`
	// change
	//
	// Types that are assignable to Change:
	//
	//	*IncomingInFlightPacket_OutgoingIndexChange
	//	*IncomingInFlightPacket_AckChange
	Change isIncomingInFlightPacket_Change `protobuf_oneof:"change"`
	// forward
	//
	// Types that are assignable to Forward:
	//
	//	*IncomingInFlightPacket_OutgoingIndexForward
	//	*IncomingInFlightPacket_AckForward
	Forward isIncomingInFlightPacket_Forward `protobuf_oneof:"forward"`
}

func (x *IncomingInFlightPacket) Reset() {
	*x = IncomingInFlightPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sunrise_swap_in_flight_packet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomingInFlightPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomingInFlightPacket) ProtoMessage() {}

// Deprecated: Use IncomingInFlightPacket.ProtoReflect.Descriptor instead.
func (*IncomingInFlightPacket) Descriptor() ([]byte, []int) {
	return file_sunrise_swap_in_flight_packet_proto_rawDescGZIP(), []int{1}
}

func (x *IncomingInFlightPacket) GetIndex() *PacketIndex {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *IncomingInFlightPacket) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *IncomingInFlightPacket) GetSrcPortId() string {
	if x != nil {
		return x.SrcPortId
	}
	return ""
}

func (x *IncomingInFlightPacket) GetSrcChannelId() string {
	if x != nil {
		return x.SrcChannelId
	}
	return ""
}

func (x *IncomingInFlightPacket) GetTimeoutHeight() string {
	if x != nil {
		return x.TimeoutHeight
	}
	return ""
}

func (x *IncomingInFlightPacket) GetTimeoutTimestamp() uint64 {
	if x != nil {
		return x.TimeoutTimestamp
	}
	return 0
}

func (x *IncomingInFlightPacket) GetAck() []byte {
	if x != nil {
		return x.Ack
	}
	return nil
}

func (x *IncomingInFlightPacket) GetResult() *RouteResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *IncomingInFlightPacket) GetInterfaceFee() string {
	if x != nil {
		return x.InterfaceFee
	}
	return ""
}

func (x *IncomingInFlightPacket) GetChange() isIncomingInFlightPacket_Change {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *IncomingInFlightPacket) GetOutgoingIndexChange() *PacketIndex {
	if x, ok := x.GetChange().(*IncomingInFlightPacket_OutgoingIndexChange); ok {
		return x.OutgoingIndexChange
	}
	return nil
}

func (x *IncomingInFlightPacket) GetAckChange() []byte {
	if x, ok := x.GetChange().(*IncomingInFlightPacket_AckChange); ok {
		return x.AckChange
	}
	return nil
}

func (x *IncomingInFlightPacket) GetForward() isIncomingInFlightPacket_Forward {
	if x != nil {
		return x.Forward
	}
	return nil
}

func (x *IncomingInFlightPacket) GetOutgoingIndexForward() *PacketIndex {
	if x, ok := x.GetForward().(*IncomingInFlightPacket_OutgoingIndexForward); ok {
		return x.OutgoingIndexForward
	}
	return nil
}

func (x *IncomingInFlightPacket) GetAckForward() []byte {
	if x, ok := x.GetForward().(*IncomingInFlightPacket_AckForward); ok {
		return x.AckForward
	}
	return nil
}

type isIncomingInFlightPacket_Change interface {
	isIncomingInFlightPacket_Change()
}

type IncomingInFlightPacket_OutgoingIndexChange struct {
	OutgoingIndexChange *PacketIndex `protobuf:"bytes,10,opt,name=outgoing_index_change,json=outgoingIndexChange,proto3,oneof"`
}

type IncomingInFlightPacket_AckChange struct {
	AckChange []byte `protobuf:"bytes,11,opt,name=ack_change,json=ackChange,proto3,oneof"`
}

func (*IncomingInFlightPacket_OutgoingIndexChange) isIncomingInFlightPacket_Change() {}

func (*IncomingInFlightPacket_AckChange) isIncomingInFlightPacket_Change() {}

type isIncomingInFlightPacket_Forward interface {
	isIncomingInFlightPacket_Forward()
}

type IncomingInFlightPacket_OutgoingIndexForward struct {
	OutgoingIndexForward *PacketIndex `protobuf:"bytes,12,opt,name=outgoing_index_forward,json=outgoingIndexForward,proto3,oneof"`
}

type IncomingInFlightPacket_AckForward struct {
	AckForward []byte `protobuf:"bytes,13,opt,name=ack_forward,json=ackForward,proto3,oneof"`
}

func (*IncomingInFlightPacket_OutgoingIndexForward) isIncomingInFlightPacket_Forward() {}

func (*IncomingInFlightPacket_AckForward) isIncomingInFlightPacket_Forward() {}

// OutgoingInFlightPacket
type OutgoingInFlightPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index            *PacketIndex `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	AckWaitingIndex  *PacketIndex `protobuf:"bytes,2,opt,name=ack_waiting_index,json=ackWaitingIndex,proto3" json:"ack_waiting_index,omitempty"`
	RetriesRemaining int32        `protobuf:"varint,3,opt,name=retries_remaining,json=retriesRemaining,proto3" json:"retries_remaining,omitempty"`
}

func (x *OutgoingInFlightPacket) Reset() {
	*x = OutgoingInFlightPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sunrise_swap_in_flight_packet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutgoingInFlightPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutgoingInFlightPacket) ProtoMessage() {}

// Deprecated: Use OutgoingInFlightPacket.ProtoReflect.Descriptor instead.
func (*OutgoingInFlightPacket) Descriptor() ([]byte, []int) {
	return file_sunrise_swap_in_flight_packet_proto_rawDescGZIP(), []int{2}
}

func (x *OutgoingInFlightPacket) GetIndex() *PacketIndex {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *OutgoingInFlightPacket) GetAckWaitingIndex() *PacketIndex {
	if x != nil {
		return x.AckWaitingIndex
	}
	return nil
}

func (x *OutgoingInFlightPacket) GetRetriesRemaining() int32 {
	if x != nil {
		return x.RetriesRemaining
	}
	return 0
}

var File_sunrise_swap_in_flight_packet_proto protoreflect.FileDescriptor

var file_sunrise_swap_in_flight_packet_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x69,
	0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x73,
	0x77, 0x61, 0x70, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x73, 0x77,
	0x61, 0x70, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61,
	0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x97, 0x05, 0x0a, 0x16, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75,
	0x6e, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x72, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x61, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x73, 0x77,
	0x61, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x4f,
	0x0a, 0x15, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0a, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x51, 0x0a, 0x16, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x01, 0x52, 0x14, 0x6f,
	0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0a, 0x61, 0x63, 0x6b, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x16,
	0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2e,
	0x73, 0x77, 0x61, 0x70, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4b, 0x0a,
	0x11, 0x61, 0x63, 0x6b, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x6e, 0x72, 0x69,
	0x73, 0x65, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x6b, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x97, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x42, 0x13, 0x49, 0x6e,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x1d, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x73, 0x77,
	0x61, 0x70, 0xa2, 0x02, 0x03, 0x53, 0x53, 0x58, 0xaa, 0x02, 0x0c, 0x53, 0x75, 0x6e, 0x72, 0x69,
	0x73, 0x65, 0x2e, 0x53, 0x77, 0x61, 0x70, 0xca, 0x02, 0x0c, 0x53, 0x75, 0x6e, 0x72, 0x69, 0x73,
	0x65, 0x5c, 0x53, 0x77, 0x61, 0x70, 0xe2, 0x02, 0x18, 0x53, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65,
	0x5c, 0x53, 0x77, 0x61, 0x70, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0d, 0x53, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x3a, 0x3a, 0x53, 0x77, 0x61,
	0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sunrise_swap_in_flight_packet_proto_rawDescOnce sync.Once
	file_sunrise_swap_in_flight_packet_proto_rawDescData = file_sunrise_swap_in_flight_packet_proto_rawDesc
)

func file_sunrise_swap_in_flight_packet_proto_rawDescGZIP() []byte {
	file_sunrise_swap_in_flight_packet_proto_rawDescOnce.Do(func() {
		file_sunrise_swap_in_flight_packet_proto_rawDescData = protoimpl.X.CompressGZIP(file_sunrise_swap_in_flight_packet_proto_rawDescData)
	})
	return file_sunrise_swap_in_flight_packet_proto_rawDescData
}

var file_sunrise_swap_in_flight_packet_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_sunrise_swap_in_flight_packet_proto_goTypes = []interface{}{
	(*PacketIndex)(nil),            // 0: sunrise.swap.PacketIndex
	(*IncomingInFlightPacket)(nil), // 1: sunrise.swap.IncomingInFlightPacket
	(*OutgoingInFlightPacket)(nil), // 2: sunrise.swap.OutgoingInFlightPacket
	(*RouteResult)(nil),            // 3: sunrise.swap.RouteResult
}
var file_sunrise_swap_in_flight_packet_proto_depIdxs = []int32{
	0, // 0: sunrise.swap.IncomingInFlightPacket.index:type_name -> sunrise.swap.PacketIndex
	3, // 1: sunrise.swap.IncomingInFlightPacket.result:type_name -> sunrise.swap.RouteResult
	0, // 2: sunrise.swap.IncomingInFlightPacket.outgoing_index_change:type_name -> sunrise.swap.PacketIndex
	0, // 3: sunrise.swap.IncomingInFlightPacket.outgoing_index_forward:type_name -> sunrise.swap.PacketIndex
	0, // 4: sunrise.swap.OutgoingInFlightPacket.index:type_name -> sunrise.swap.PacketIndex
	0, // 5: sunrise.swap.OutgoingInFlightPacket.ack_waiting_index:type_name -> sunrise.swap.PacketIndex
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_sunrise_swap_in_flight_packet_proto_init() }
func file_sunrise_swap_in_flight_packet_proto_init() {
	if File_sunrise_swap_in_flight_packet_proto != nil {
		return
	}
	file_sunrise_swap_route_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sunrise_swap_in_flight_packet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sunrise_swap_in_flight_packet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomingInFlightPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sunrise_swap_in_flight_packet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutgoingInFlightPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sunrise_swap_in_flight_packet_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*IncomingInFlightPacket_OutgoingIndexChange)(nil),
		(*IncomingInFlightPacket_AckChange)(nil),
		(*IncomingInFlightPacket_OutgoingIndexForward)(nil),
		(*IncomingInFlightPacket_AckForward)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sunrise_swap_in_flight_packet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sunrise_swap_in_flight_packet_proto_goTypes,
		DependencyIndexes: file_sunrise_swap_in_flight_packet_proto_depIdxs,
		MessageInfos:      file_sunrise_swap_in_flight_packet_proto_msgTypes,
	}.Build()
	File_sunrise_swap_in_flight_packet_proto = out.File
	file_sunrise_swap_in_flight_packet_proto_rawDesc = nil
	file_sunrise_swap_in_flight_packet_proto_goTypes = nil
	file_sunrise_swap_in_flight_packet_proto_depIdxs = nil
}
