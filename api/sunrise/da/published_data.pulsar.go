// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package da

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_PublishedData_3_list)(nil)

type _PublishedData_3_list struct {
	list *[][]byte
}

func (x *_PublishedData_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PublishedData_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_PublishedData_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_PublishedData_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_PublishedData_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message PublishedData at list field ShardDoubleHashes as it is not of Message kind"))
}

func (x *_PublishedData_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_PublishedData_3_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_PublishedData_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_PublishedData_8_list)(nil)

type _PublishedData_8_list struct {
	list *[]*v1beta1.Coin
}

func (x *_PublishedData_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PublishedData_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PublishedData_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_PublishedData_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PublishedData_8_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PublishedData_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PublishedData_8_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PublishedData_8_list) IsValid() bool {
	return x.list != nil
}

var (
	md_PublishedData                     protoreflect.MessageDescriptor
	fd_PublishedData_metadata_uri        protoreflect.FieldDescriptor
	fd_PublishedData_parity_shard_count  protoreflect.FieldDescriptor
	fd_PublishedData_shard_double_hashes protoreflect.FieldDescriptor
	fd_PublishedData_timestamp           protoreflect.FieldDescriptor
	fd_PublishedData_status              protoreflect.FieldDescriptor
	fd_PublishedData_publisher           protoreflect.FieldDescriptor
	fd_PublishedData_challenger          protoreflect.FieldDescriptor
	fd_PublishedData_collateral          protoreflect.FieldDescriptor
	fd_PublishedData_challenge_timestamp protoreflect.FieldDescriptor
	fd_PublishedData_data_source_info    protoreflect.FieldDescriptor
)

func init() {
	file_sunrise_da_published_data_proto_init()
	md_PublishedData = File_sunrise_da_published_data_proto.Messages().ByName("PublishedData")
	fd_PublishedData_metadata_uri = md_PublishedData.Fields().ByName("metadata_uri")
	fd_PublishedData_parity_shard_count = md_PublishedData.Fields().ByName("parity_shard_count")
	fd_PublishedData_shard_double_hashes = md_PublishedData.Fields().ByName("shard_double_hashes")
	fd_PublishedData_timestamp = md_PublishedData.Fields().ByName("timestamp")
	fd_PublishedData_status = md_PublishedData.Fields().ByName("status")
	fd_PublishedData_publisher = md_PublishedData.Fields().ByName("publisher")
	fd_PublishedData_challenger = md_PublishedData.Fields().ByName("challenger")
	fd_PublishedData_collateral = md_PublishedData.Fields().ByName("collateral")
	fd_PublishedData_challenge_timestamp = md_PublishedData.Fields().ByName("challenge_timestamp")
	fd_PublishedData_data_source_info = md_PublishedData.Fields().ByName("data_source_info")
}

var _ protoreflect.Message = (*fastReflection_PublishedData)(nil)

type fastReflection_PublishedData PublishedData

func (x *PublishedData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PublishedData)(x)
}

func (x *PublishedData) slowProtoReflect() protoreflect.Message {
	mi := &file_sunrise_da_published_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PublishedData_messageType fastReflection_PublishedData_messageType
var _ protoreflect.MessageType = fastReflection_PublishedData_messageType{}

type fastReflection_PublishedData_messageType struct{}

func (x fastReflection_PublishedData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PublishedData)(nil)
}
func (x fastReflection_PublishedData_messageType) New() protoreflect.Message {
	return new(fastReflection_PublishedData)
}
func (x fastReflection_PublishedData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PublishedData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PublishedData) Descriptor() protoreflect.MessageDescriptor {
	return md_PublishedData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PublishedData) Type() protoreflect.MessageType {
	return _fastReflection_PublishedData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PublishedData) New() protoreflect.Message {
	return new(fastReflection_PublishedData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PublishedData) Interface() protoreflect.ProtoMessage {
	return (*PublishedData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PublishedData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MetadataUri != "" {
		value := protoreflect.ValueOfString(x.MetadataUri)
		if !f(fd_PublishedData_metadata_uri, value) {
			return
		}
	}
	if x.ParityShardCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ParityShardCount)
		if !f(fd_PublishedData_parity_shard_count, value) {
			return
		}
	}
	if len(x.ShardDoubleHashes) != 0 {
		value := protoreflect.ValueOfList(&_PublishedData_3_list{list: &x.ShardDoubleHashes})
		if !f(fd_PublishedData_shard_double_hashes, value) {
			return
		}
	}
	if x.Timestamp != nil {
		value := protoreflect.ValueOfMessage(x.Timestamp.ProtoReflect())
		if !f(fd_PublishedData_timestamp, value) {
			return
		}
	}
	if x.Status != "" {
		value := protoreflect.ValueOfString(x.Status)
		if !f(fd_PublishedData_status, value) {
			return
		}
	}
	if x.Publisher != "" {
		value := protoreflect.ValueOfString(x.Publisher)
		if !f(fd_PublishedData_publisher, value) {
			return
		}
	}
	if x.Challenger != "" {
		value := protoreflect.ValueOfString(x.Challenger)
		if !f(fd_PublishedData_challenger, value) {
			return
		}
	}
	if len(x.Collateral) != 0 {
		value := protoreflect.ValueOfList(&_PublishedData_8_list{list: &x.Collateral})
		if !f(fd_PublishedData_collateral, value) {
			return
		}
	}
	if x.ChallengeTimestamp != nil {
		value := protoreflect.ValueOfMessage(x.ChallengeTimestamp.ProtoReflect())
		if !f(fd_PublishedData_challenge_timestamp, value) {
			return
		}
	}
	if x.DataSourceInfo != "" {
		value := protoreflect.ValueOfString(x.DataSourceInfo)
		if !f(fd_PublishedData_data_source_info, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PublishedData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sunrise.da.PublishedData.metadata_uri":
		return x.MetadataUri != ""
	case "sunrise.da.PublishedData.parity_shard_count":
		return x.ParityShardCount != uint64(0)
	case "sunrise.da.PublishedData.shard_double_hashes":
		return len(x.ShardDoubleHashes) != 0
	case "sunrise.da.PublishedData.timestamp":
		return x.Timestamp != nil
	case "sunrise.da.PublishedData.status":
		return x.Status != ""
	case "sunrise.da.PublishedData.publisher":
		return x.Publisher != ""
	case "sunrise.da.PublishedData.challenger":
		return x.Challenger != ""
	case "sunrise.da.PublishedData.collateral":
		return len(x.Collateral) != 0
	case "sunrise.da.PublishedData.challenge_timestamp":
		return x.ChallengeTimestamp != nil
	case "sunrise.da.PublishedData.data_source_info":
		return x.DataSourceInfo != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.da.PublishedData"))
		}
		panic(fmt.Errorf("message sunrise.da.PublishedData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PublishedData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sunrise.da.PublishedData.metadata_uri":
		x.MetadataUri = ""
	case "sunrise.da.PublishedData.parity_shard_count":
		x.ParityShardCount = uint64(0)
	case "sunrise.da.PublishedData.shard_double_hashes":
		x.ShardDoubleHashes = nil
	case "sunrise.da.PublishedData.timestamp":
		x.Timestamp = nil
	case "sunrise.da.PublishedData.status":
		x.Status = ""
	case "sunrise.da.PublishedData.publisher":
		x.Publisher = ""
	case "sunrise.da.PublishedData.challenger":
		x.Challenger = ""
	case "sunrise.da.PublishedData.collateral":
		x.Collateral = nil
	case "sunrise.da.PublishedData.challenge_timestamp":
		x.ChallengeTimestamp = nil
	case "sunrise.da.PublishedData.data_source_info":
		x.DataSourceInfo = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.da.PublishedData"))
		}
		panic(fmt.Errorf("message sunrise.da.PublishedData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PublishedData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sunrise.da.PublishedData.metadata_uri":
		value := x.MetadataUri
		return protoreflect.ValueOfString(value)
	case "sunrise.da.PublishedData.parity_shard_count":
		value := x.ParityShardCount
		return protoreflect.ValueOfUint64(value)
	case "sunrise.da.PublishedData.shard_double_hashes":
		if len(x.ShardDoubleHashes) == 0 {
			return protoreflect.ValueOfList(&_PublishedData_3_list{})
		}
		listValue := &_PublishedData_3_list{list: &x.ShardDoubleHashes}
		return protoreflect.ValueOfList(listValue)
	case "sunrise.da.PublishedData.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sunrise.da.PublishedData.status":
		value := x.Status
		return protoreflect.ValueOfString(value)
	case "sunrise.da.PublishedData.publisher":
		value := x.Publisher
		return protoreflect.ValueOfString(value)
	case "sunrise.da.PublishedData.challenger":
		value := x.Challenger
		return protoreflect.ValueOfString(value)
	case "sunrise.da.PublishedData.collateral":
		if len(x.Collateral) == 0 {
			return protoreflect.ValueOfList(&_PublishedData_8_list{})
		}
		listValue := &_PublishedData_8_list{list: &x.Collateral}
		return protoreflect.ValueOfList(listValue)
	case "sunrise.da.PublishedData.challenge_timestamp":
		value := x.ChallengeTimestamp
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sunrise.da.PublishedData.data_source_info":
		value := x.DataSourceInfo
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.da.PublishedData"))
		}
		panic(fmt.Errorf("message sunrise.da.PublishedData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PublishedData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sunrise.da.PublishedData.metadata_uri":
		x.MetadataUri = value.Interface().(string)
	case "sunrise.da.PublishedData.parity_shard_count":
		x.ParityShardCount = value.Uint()
	case "sunrise.da.PublishedData.shard_double_hashes":
		lv := value.List()
		clv := lv.(*_PublishedData_3_list)
		x.ShardDoubleHashes = *clv.list
	case "sunrise.da.PublishedData.timestamp":
		x.Timestamp = value.Message().Interface().(*timestamppb.Timestamp)
	case "sunrise.da.PublishedData.status":
		x.Status = value.Interface().(string)
	case "sunrise.da.PublishedData.publisher":
		x.Publisher = value.Interface().(string)
	case "sunrise.da.PublishedData.challenger":
		x.Challenger = value.Interface().(string)
	case "sunrise.da.PublishedData.collateral":
		lv := value.List()
		clv := lv.(*_PublishedData_8_list)
		x.Collateral = *clv.list
	case "sunrise.da.PublishedData.challenge_timestamp":
		x.ChallengeTimestamp = value.Message().Interface().(*timestamppb.Timestamp)
	case "sunrise.da.PublishedData.data_source_info":
		x.DataSourceInfo = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.da.PublishedData"))
		}
		panic(fmt.Errorf("message sunrise.da.PublishedData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PublishedData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.da.PublishedData.shard_double_hashes":
		if x.ShardDoubleHashes == nil {
			x.ShardDoubleHashes = [][]byte{}
		}
		value := &_PublishedData_3_list{list: &x.ShardDoubleHashes}
		return protoreflect.ValueOfList(value)
	case "sunrise.da.PublishedData.timestamp":
		if x.Timestamp == nil {
			x.Timestamp = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Timestamp.ProtoReflect())
	case "sunrise.da.PublishedData.collateral":
		if x.Collateral == nil {
			x.Collateral = []*v1beta1.Coin{}
		}
		value := &_PublishedData_8_list{list: &x.Collateral}
		return protoreflect.ValueOfList(value)
	case "sunrise.da.PublishedData.challenge_timestamp":
		if x.ChallengeTimestamp == nil {
			x.ChallengeTimestamp = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.ChallengeTimestamp.ProtoReflect())
	case "sunrise.da.PublishedData.metadata_uri":
		panic(fmt.Errorf("field metadata_uri of message sunrise.da.PublishedData is not mutable"))
	case "sunrise.da.PublishedData.parity_shard_count":
		panic(fmt.Errorf("field parity_shard_count of message sunrise.da.PublishedData is not mutable"))
	case "sunrise.da.PublishedData.status":
		panic(fmt.Errorf("field status of message sunrise.da.PublishedData is not mutable"))
	case "sunrise.da.PublishedData.publisher":
		panic(fmt.Errorf("field publisher of message sunrise.da.PublishedData is not mutable"))
	case "sunrise.da.PublishedData.challenger":
		panic(fmt.Errorf("field challenger of message sunrise.da.PublishedData is not mutable"))
	case "sunrise.da.PublishedData.data_source_info":
		panic(fmt.Errorf("field data_source_info of message sunrise.da.PublishedData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.da.PublishedData"))
		}
		panic(fmt.Errorf("message sunrise.da.PublishedData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PublishedData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.da.PublishedData.metadata_uri":
		return protoreflect.ValueOfString("")
	case "sunrise.da.PublishedData.parity_shard_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sunrise.da.PublishedData.shard_double_hashes":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_PublishedData_3_list{list: &list})
	case "sunrise.da.PublishedData.timestamp":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sunrise.da.PublishedData.status":
		return protoreflect.ValueOfString("")
	case "sunrise.da.PublishedData.publisher":
		return protoreflect.ValueOfString("")
	case "sunrise.da.PublishedData.challenger":
		return protoreflect.ValueOfString("")
	case "sunrise.da.PublishedData.collateral":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_PublishedData_8_list{list: &list})
	case "sunrise.da.PublishedData.challenge_timestamp":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sunrise.da.PublishedData.data_source_info":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.da.PublishedData"))
		}
		panic(fmt.Errorf("message sunrise.da.PublishedData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PublishedData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sunrise.da.PublishedData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PublishedData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PublishedData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PublishedData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PublishedData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PublishedData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.MetadataUri)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ParityShardCount != 0 {
			n += 1 + runtime.Sov(uint64(x.ParityShardCount))
		}
		if len(x.ShardDoubleHashes) > 0 {
			for _, b := range x.ShardDoubleHashes {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Timestamp != nil {
			l = options.Size(x.Timestamp)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Status)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Publisher)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Challenger)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Collateral) > 0 {
			for _, e := range x.Collateral {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.ChallengeTimestamp != nil {
			l = options.Size(x.ChallengeTimestamp)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DataSourceInfo)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PublishedData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.DataSourceInfo) > 0 {
			i -= len(x.DataSourceInfo)
			copy(dAtA[i:], x.DataSourceInfo)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DataSourceInfo)))
			i--
			dAtA[i] = 0x52
		}
		if x.ChallengeTimestamp != nil {
			encoded, err := options.Marshal(x.ChallengeTimestamp)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.Collateral) > 0 {
			for iNdEx := len(x.Collateral) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Collateral[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.Challenger) > 0 {
			i -= len(x.Challenger)
			copy(dAtA[i:], x.Challenger)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Challenger)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.Publisher) > 0 {
			i -= len(x.Publisher)
			copy(dAtA[i:], x.Publisher)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Publisher)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Status) > 0 {
			i -= len(x.Status)
			copy(dAtA[i:], x.Status)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Status)))
			i--
			dAtA[i] = 0x2a
		}
		if x.Timestamp != nil {
			encoded, err := options.Marshal(x.Timestamp)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.ShardDoubleHashes) > 0 {
			for iNdEx := len(x.ShardDoubleHashes) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.ShardDoubleHashes[iNdEx])
				copy(dAtA[i:], x.ShardDoubleHashes[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ShardDoubleHashes[iNdEx])))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.ParityShardCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ParityShardCount))
			i--
			dAtA[i] = 0x10
		}
		if len(x.MetadataUri) > 0 {
			i -= len(x.MetadataUri)
			copy(dAtA[i:], x.MetadataUri)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MetadataUri)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PublishedData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PublishedData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PublishedData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MetadataUri = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParityShardCount", wireType)
				}
				x.ParityShardCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ParityShardCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ShardDoubleHashes", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ShardDoubleHashes = append(x.ShardDoubleHashes, make([]byte, postIndex-iNdEx))
				copy(x.ShardDoubleHashes[len(x.ShardDoubleHashes)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Timestamp == nil {
					x.Timestamp = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Timestamp); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Status = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Publisher", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Publisher = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Challenger", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Challenger = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Collateral = append(x.Collateral, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Collateral[len(x.Collateral)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChallengeTimestamp", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ChallengeTimestamp == nil {
					x.ChallengeTimestamp = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ChallengeTimestamp); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DataSourceInfo", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DataSourceInfo = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Proof_3_list)(nil)

type _Proof_3_list struct {
	list *[]int64
}

func (x *_Proof_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Proof_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfInt64((*x.list)[i])
}

func (x *_Proof_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Int()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Proof_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Int()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Proof_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Proof at list field Indices as it is not of Message kind"))
}

func (x *_Proof_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Proof_3_list) NewElement() protoreflect.Value {
	v := int64(0)
	return protoreflect.ValueOfInt64(v)
}

func (x *_Proof_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Proof_4_list)(nil)

type _Proof_4_list struct {
	list *[][]byte
}

func (x *_Proof_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Proof_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_Proof_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Proof_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Proof_4_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Proof at list field Proofs as it is not of Message kind"))
}

func (x *_Proof_4_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Proof_4_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_Proof_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Proof               protoreflect.MessageDescriptor
	fd_Proof_metadata_uri  protoreflect.FieldDescriptor
	fd_Proof_sender        protoreflect.FieldDescriptor
	fd_Proof_indices       protoreflect.FieldDescriptor
	fd_Proof_proofs        protoreflect.FieldDescriptor
	fd_Proof_is_valid_data protoreflect.FieldDescriptor
)

func init() {
	file_sunrise_da_published_data_proto_init()
	md_Proof = File_sunrise_da_published_data_proto.Messages().ByName("Proof")
	fd_Proof_metadata_uri = md_Proof.Fields().ByName("metadata_uri")
	fd_Proof_sender = md_Proof.Fields().ByName("sender")
	fd_Proof_indices = md_Proof.Fields().ByName("indices")
	fd_Proof_proofs = md_Proof.Fields().ByName("proofs")
	fd_Proof_is_valid_data = md_Proof.Fields().ByName("is_valid_data")
}

var _ protoreflect.Message = (*fastReflection_Proof)(nil)

type fastReflection_Proof Proof

func (x *Proof) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Proof)(x)
}

func (x *Proof) slowProtoReflect() protoreflect.Message {
	mi := &file_sunrise_da_published_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Proof_messageType fastReflection_Proof_messageType
var _ protoreflect.MessageType = fastReflection_Proof_messageType{}

type fastReflection_Proof_messageType struct{}

func (x fastReflection_Proof_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Proof)(nil)
}
func (x fastReflection_Proof_messageType) New() protoreflect.Message {
	return new(fastReflection_Proof)
}
func (x fastReflection_Proof_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Proof
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Proof) Descriptor() protoreflect.MessageDescriptor {
	return md_Proof
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Proof) Type() protoreflect.MessageType {
	return _fastReflection_Proof_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Proof) New() protoreflect.Message {
	return new(fastReflection_Proof)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Proof) Interface() protoreflect.ProtoMessage {
	return (*Proof)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Proof) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MetadataUri != "" {
		value := protoreflect.ValueOfString(x.MetadataUri)
		if !f(fd_Proof_metadata_uri, value) {
			return
		}
	}
	if x.Sender != "" {
		value := protoreflect.ValueOfString(x.Sender)
		if !f(fd_Proof_sender, value) {
			return
		}
	}
	if len(x.Indices) != 0 {
		value := protoreflect.ValueOfList(&_Proof_3_list{list: &x.Indices})
		if !f(fd_Proof_indices, value) {
			return
		}
	}
	if len(x.Proofs) != 0 {
		value := protoreflect.ValueOfList(&_Proof_4_list{list: &x.Proofs})
		if !f(fd_Proof_proofs, value) {
			return
		}
	}
	if x.IsValidData != false {
		value := protoreflect.ValueOfBool(x.IsValidData)
		if !f(fd_Proof_is_valid_data, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Proof) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sunrise.da.Proof.metadata_uri":
		return x.MetadataUri != ""
	case "sunrise.da.Proof.sender":
		return x.Sender != ""
	case "sunrise.da.Proof.indices":
		return len(x.Indices) != 0
	case "sunrise.da.Proof.proofs":
		return len(x.Proofs) != 0
	case "sunrise.da.Proof.is_valid_data":
		return x.IsValidData != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.da.Proof"))
		}
		panic(fmt.Errorf("message sunrise.da.Proof does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Proof) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sunrise.da.Proof.metadata_uri":
		x.MetadataUri = ""
	case "sunrise.da.Proof.sender":
		x.Sender = ""
	case "sunrise.da.Proof.indices":
		x.Indices = nil
	case "sunrise.da.Proof.proofs":
		x.Proofs = nil
	case "sunrise.da.Proof.is_valid_data":
		x.IsValidData = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.da.Proof"))
		}
		panic(fmt.Errorf("message sunrise.da.Proof does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Proof) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sunrise.da.Proof.metadata_uri":
		value := x.MetadataUri
		return protoreflect.ValueOfString(value)
	case "sunrise.da.Proof.sender":
		value := x.Sender
		return protoreflect.ValueOfString(value)
	case "sunrise.da.Proof.indices":
		if len(x.Indices) == 0 {
			return protoreflect.ValueOfList(&_Proof_3_list{})
		}
		listValue := &_Proof_3_list{list: &x.Indices}
		return protoreflect.ValueOfList(listValue)
	case "sunrise.da.Proof.proofs":
		if len(x.Proofs) == 0 {
			return protoreflect.ValueOfList(&_Proof_4_list{})
		}
		listValue := &_Proof_4_list{list: &x.Proofs}
		return protoreflect.ValueOfList(listValue)
	case "sunrise.da.Proof.is_valid_data":
		value := x.IsValidData
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.da.Proof"))
		}
		panic(fmt.Errorf("message sunrise.da.Proof does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Proof) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sunrise.da.Proof.metadata_uri":
		x.MetadataUri = value.Interface().(string)
	case "sunrise.da.Proof.sender":
		x.Sender = value.Interface().(string)
	case "sunrise.da.Proof.indices":
		lv := value.List()
		clv := lv.(*_Proof_3_list)
		x.Indices = *clv.list
	case "sunrise.da.Proof.proofs":
		lv := value.List()
		clv := lv.(*_Proof_4_list)
		x.Proofs = *clv.list
	case "sunrise.da.Proof.is_valid_data":
		x.IsValidData = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.da.Proof"))
		}
		panic(fmt.Errorf("message sunrise.da.Proof does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Proof) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.da.Proof.indices":
		if x.Indices == nil {
			x.Indices = []int64{}
		}
		value := &_Proof_3_list{list: &x.Indices}
		return protoreflect.ValueOfList(value)
	case "sunrise.da.Proof.proofs":
		if x.Proofs == nil {
			x.Proofs = [][]byte{}
		}
		value := &_Proof_4_list{list: &x.Proofs}
		return protoreflect.ValueOfList(value)
	case "sunrise.da.Proof.metadata_uri":
		panic(fmt.Errorf("field metadata_uri of message sunrise.da.Proof is not mutable"))
	case "sunrise.da.Proof.sender":
		panic(fmt.Errorf("field sender of message sunrise.da.Proof is not mutable"))
	case "sunrise.da.Proof.is_valid_data":
		panic(fmt.Errorf("field is_valid_data of message sunrise.da.Proof is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.da.Proof"))
		}
		panic(fmt.Errorf("message sunrise.da.Proof does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Proof) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sunrise.da.Proof.metadata_uri":
		return protoreflect.ValueOfString("")
	case "sunrise.da.Proof.sender":
		return protoreflect.ValueOfString("")
	case "sunrise.da.Proof.indices":
		list := []int64{}
		return protoreflect.ValueOfList(&_Proof_3_list{list: &list})
	case "sunrise.da.Proof.proofs":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_Proof_4_list{list: &list})
	case "sunrise.da.Proof.is_valid_data":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sunrise.da.Proof"))
		}
		panic(fmt.Errorf("message sunrise.da.Proof does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Proof) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sunrise.da.Proof", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Proof) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Proof) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Proof) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Proof) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Proof)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.MetadataUri)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Sender)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Indices) > 0 {
			l = 0
			for _, e := range x.Indices {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if len(x.Proofs) > 0 {
			for _, b := range x.Proofs {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.IsValidData {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Proof)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.IsValidData {
			i--
			if x.IsValidData {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if len(x.Proofs) > 0 {
			for iNdEx := len(x.Proofs) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Proofs[iNdEx])
				copy(dAtA[i:], x.Proofs[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Proofs[iNdEx])))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.Indices) > 0 {
			var pksize2 int
			for _, num := range x.Indices {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num1 := range x.Indices {
				num := uint64(num1)
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Sender) > 0 {
			i -= len(x.Sender)
			copy(dAtA[i:], x.Sender)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Sender)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.MetadataUri) > 0 {
			i -= len(x.MetadataUri)
			copy(dAtA[i:], x.MetadataUri)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MetadataUri)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Proof)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Proof: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MetadataUri = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sender = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType == 0 {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.Indices = append(x.Indices, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.Indices) == 0 {
						x.Indices = make([]int64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v int64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= int64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.Indices = append(x.Indices, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Indices", wireType)
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Proofs", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Proofs = append(x.Proofs, make([]byte, postIndex-iNdEx))
				copy(x.Proofs[len(x.Proofs)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsValidData", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsValidData = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sunrise/da/published_data.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PublishedData
type PublishedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetadataUri        string                 `protobuf:"bytes,1,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
	ParityShardCount   uint64                 `protobuf:"varint,2,opt,name=parity_shard_count,json=parityShardCount,proto3" json:"parity_shard_count,omitempty"`
	ShardDoubleHashes  [][]byte               `protobuf:"bytes,3,rep,name=shard_double_hashes,json=shardDoubleHashes,proto3" json:"shard_double_hashes,omitempty"`
	Timestamp          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Status             string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"` // TODO: to be replaced with enum
	Publisher          string                 `protobuf:"bytes,6,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Challenger         string                 `protobuf:"bytes,7,opt,name=challenger,proto3" json:"challenger,omitempty"`
	Collateral         []*v1beta1.Coin        `protobuf:"bytes,8,rep,name=collateral,proto3" json:"collateral,omitempty"`
	ChallengeTimestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=challenge_timestamp,json=challengeTimestamp,proto3" json:"challenge_timestamp,omitempty"`
	DataSourceInfo     string                 `protobuf:"bytes,10,opt,name=data_source_info,json=dataSourceInfo,proto3" json:"data_source_info,omitempty"`
}

func (x *PublishedData) Reset() {
	*x = PublishedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sunrise_da_published_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedData) ProtoMessage() {}

// Deprecated: Use PublishedData.ProtoReflect.Descriptor instead.
func (*PublishedData) Descriptor() ([]byte, []int) {
	return file_sunrise_da_published_data_proto_rawDescGZIP(), []int{0}
}

func (x *PublishedData) GetMetadataUri() string {
	if x != nil {
		return x.MetadataUri
	}
	return ""
}

func (x *PublishedData) GetParityShardCount() uint64 {
	if x != nil {
		return x.ParityShardCount
	}
	return 0
}

func (x *PublishedData) GetShardDoubleHashes() [][]byte {
	if x != nil {
		return x.ShardDoubleHashes
	}
	return nil
}

func (x *PublishedData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PublishedData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PublishedData) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *PublishedData) GetChallenger() string {
	if x != nil {
		return x.Challenger
	}
	return ""
}

func (x *PublishedData) GetCollateral() []*v1beta1.Coin {
	if x != nil {
		return x.Collateral
	}
	return nil
}

func (x *PublishedData) GetChallengeTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ChallengeTimestamp
	}
	return nil
}

func (x *PublishedData) GetDataSourceInfo() string {
	if x != nil {
		return x.DataSourceInfo
	}
	return ""
}

// Proof
type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetadataUri string   `protobuf:"bytes,1,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
	Sender      string   `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Indices     []int64  `protobuf:"varint,3,rep,packed,name=indices,proto3" json:"indices,omitempty"`
	Proofs      [][]byte `protobuf:"bytes,4,rep,name=proofs,proto3" json:"proofs,omitempty"`
	IsValidData bool     `protobuf:"varint,5,opt,name=is_valid_data,json=isValidData,proto3" json:"is_valid_data,omitempty"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sunrise_da_published_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_sunrise_da_published_data_proto_rawDescGZIP(), []int{1}
}

func (x *Proof) GetMetadataUri() string {
	if x != nil {
		return x.MetadataUri
	}
	return ""
}

func (x *Proof) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Proof) GetIndices() []int64 {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *Proof) GetProofs() [][]byte {
	if x != nil {
		return x.Proofs
	}
	return nil
}

func (x *Proof) GetIsValidData() bool {
	if x != nil {
		return x.IsValidData
	}
	return false
}

var File_sunrise_da_published_data_proto protoreflect.FileDescriptor

var file_sunrise_da_published_data_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x64, 0x61, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x64, 0x61, 0x1a, 0x1e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67,
	0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x04, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x69, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x72, 0x12, 0x6b, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x55,
	0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f,
	0x01, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x98, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x69, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x8a, 0x01, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x64, 0x61, 0x42, 0x12, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x64, 0x61,
	0xa2, 0x02, 0x03, 0x53, 0x44, 0x58, 0xaa, 0x02, 0x0a, 0x53, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65,
	0x2e, 0x44, 0x61, 0xca, 0x02, 0x0a, 0x53, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x5c, 0x44, 0x61,
	0xe2, 0x02, 0x16, 0x53, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x5c, 0x44, 0x61, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x53, 0x75, 0x6e, 0x72,
	0x69, 0x73, 0x65, 0x3a, 0x3a, 0x44, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sunrise_da_published_data_proto_rawDescOnce sync.Once
	file_sunrise_da_published_data_proto_rawDescData = file_sunrise_da_published_data_proto_rawDesc
)

func file_sunrise_da_published_data_proto_rawDescGZIP() []byte {
	file_sunrise_da_published_data_proto_rawDescOnce.Do(func() {
		file_sunrise_da_published_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_sunrise_da_published_data_proto_rawDescData)
	})
	return file_sunrise_da_published_data_proto_rawDescData
}

var file_sunrise_da_published_data_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_sunrise_da_published_data_proto_goTypes = []interface{}{
	(*PublishedData)(nil),         // 0: sunrise.da.PublishedData
	(*Proof)(nil),                 // 1: sunrise.da.Proof
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
	(*v1beta1.Coin)(nil),          // 3: cosmos.base.v1beta1.Coin
}
var file_sunrise_da_published_data_proto_depIdxs = []int32{
	2, // 0: sunrise.da.PublishedData.timestamp:type_name -> google.protobuf.Timestamp
	3, // 1: sunrise.da.PublishedData.collateral:type_name -> cosmos.base.v1beta1.Coin
	2, // 2: sunrise.da.PublishedData.challenge_timestamp:type_name -> google.protobuf.Timestamp
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_sunrise_da_published_data_proto_init() }
func file_sunrise_da_published_data_proto_init() {
	if File_sunrise_da_published_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sunrise_da_published_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sunrise_da_published_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sunrise_da_published_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sunrise_da_published_data_proto_goTypes,
		DependencyIndexes: file_sunrise_da_published_data_proto_depIdxs,
		MessageInfos:      file_sunrise_da_published_data_proto_msgTypes,
	}.Build()
	File_sunrise_da_published_data_proto = out.File
	file_sunrise_da_published_data_proto_rawDesc = nil
	file_sunrise_da_published_data_proto_goTypes = nil
	file_sunrise_da_published_data_proto_depIdxs = nil
}
