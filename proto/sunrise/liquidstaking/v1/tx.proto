syntax = "proto3";

package sunrise.liquidstaking.v1;

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "sunrise/liquidstaking/v1/params.proto";

option go_package = "github.com/sunriselayer/sunrise/x/liquidstaking/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // LiquidStake
  rpc LiquidStake(MsgLiquidStake) returns (MsgLiquidStakeResponse);

  // LiquidUnstake
  rpc LiquidUnstake(MsgLiquidUnstake) returns (MsgLiquidUnstakeResponse);

  // ClaimRewards
  rpc ClaimRewards(MsgClaimRewards) returns (MsgClaimRewardsResponse);

  // WithdrawUnbonded
  rpc WithdrawUnbonded(MsgWithdrawUnbonded) returns (MsgWithdrawUnbondedResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgLiquidStake
message MsgLiquidStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
  string amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// MsgLiquidStakeResponse
message MsgLiquidStakeResponse {}

// MsgLiquidUnstake
message MsgLiquidUnstake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
  string amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// MsgLiquidUnstakeResponse
message MsgLiquidUnstakeResponse {}

// MsgClaimRewards
message MsgClaimRewards {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgClaimRewardsResponse
message MsgClaimRewardsResponse {}

// MsgWithdrawUnbonded
message MsgWithdrawUnbonded {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgWithdrawUnbondedResponse
message MsgWithdrawUnbondedResponse {}
