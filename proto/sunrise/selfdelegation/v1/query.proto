syntax = "proto3";
package sunrise.selfdelegation.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "sunrise/selfdelegation/v1/params.proto";

option go_package = "github.com/sunriselayer/sunrise/x/selfdelegation/types";

// Query defines the gRPC querier service.
service Query {
  // Params queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sunrise/selfdelegation/v1/params";
  }

  // SelfDelegationProxyAccountByRootOwner queries the SelfDelegationProxyAccount by root owner address.
  rpc SelfDelegationProxyAccountByRootOwner(QuerySelfDelegationProxyAccountByRootOwnerRequest) returns (QuerySelfDelegationProxyAccountByRootOwnerResponse) {
    option (google.api.http).get = "/sunrise/selfdelegation/v1/self_delegation_proxy_account_by_root_owner/{root_owner_address}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QuerySelfDelegationProxyAccountByRootOwnerRequest is request type for the Query/SelfDelegationProxyAccountByRootOwner RPC method.
message QuerySelfDelegationProxyAccountByRootOwnerRequest {
  string root_owner_address = 1;
}

// QuerySelfDelegationProxyAccountByRootOwnerResponse is response type for the Query/SelfDelegationProxyAccountByRootOwner RPC method.
message QuerySelfDelegationProxyAccountByRootOwnerResponse {
  string self_delegation_proxy_account_address = 1;
}
