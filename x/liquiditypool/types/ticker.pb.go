// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/liquiditypool/v1/ticker.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TickInfo
type TickInfo struct {
	PoolId         uint64                                      `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	TickIndex      int64                                       `protobuf:"varint,2,opt,name=tick_index,json=tickIndex,proto3" json:"tick_index,omitempty"`
	LiquidityGross string                                      `protobuf:"bytes,3,opt,name=liquidity_gross,json=liquidityGross,proto3" json:"liquidity_gross,omitempty" yaml:"liquidity_gross"`
	LiquidityNet   string                                      `protobuf:"bytes,4,opt,name=liquidity_net,json=liquidityNet,proto3" json:"liquidity_net,omitempty" yaml:"liquidity_net"`
	FeeGrowth      github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,5,rep,name=fee_growth,json=feeGrowth,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"fee_growth"`
}

func (m *TickInfo) Reset()         { *m = TickInfo{} }
func (m *TickInfo) String() string { return proto.CompactTextString(m) }
func (*TickInfo) ProtoMessage()    {}
func (*TickInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_79c3f5ef0bf4dcde, []int{0}
}
func (m *TickInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TickInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TickInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TickInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickInfo.Merge(m, src)
}
func (m *TickInfo) XXX_Size() int {
	return m.Size()
}
func (m *TickInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TickInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TickInfo proto.InternalMessageInfo

func (m *TickInfo) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *TickInfo) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *TickInfo) GetLiquidityGross() string {
	if m != nil {
		return m.LiquidityGross
	}
	return ""
}

func (m *TickInfo) GetLiquidityNet() string {
	if m != nil {
		return m.LiquidityNet
	}
	return ""
}

func (m *TickInfo) GetFeeGrowth() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.FeeGrowth
	}
	return nil
}

func init() {
	proto.RegisterType((*TickInfo)(nil), "sunrise.liquiditypool.v1.TickInfo")
}

func init() {
	proto.RegisterFile("sunrise/liquiditypool/v1/ticker.proto", fileDescriptor_79c3f5ef0bf4dcde)
}

var fileDescriptor_79c3f5ef0bf4dcde = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0x36, 0x6d, 0x21, 0xcb, 0x9f, 0xb0, 0x2a, 0x64, 0x2a, 0xb4, 0x89, 0x22, 0x40, 0x16,
	0xa8, 0x5e, 0x99, 0x8a, 0x0b, 0x47, 0x83, 0x54, 0x55, 0x48, 0x20, 0x22, 0x4e, 0x5c, 0x2c, 0xff,
	0x4c, 0xdc, 0x55, 0xec, 0x5d, 0xe3, 0xdd, 0x84, 0xf8, 0x2d, 0x78, 0x0c, 0xc4, 0x89, 0x03, 0x0f,
	0xd1, 0x63, 0xc5, 0x89, 0x53, 0x40, 0xce, 0x81, 0x7b, 0x9f, 0x00, 0xad, 0xbd, 0x09, 0xd4, 0x17,
	0x7b, 0x67, 0xbe, 0x6f, 0xbe, 0x6f, 0x76, 0x76, 0xf0, 0x23, 0x39, 0xe7, 0x25, 0x93, 0x40, 0x33,
	0xf6, 0x71, 0xce, 0x12, 0xa6, 0xaa, 0x42, 0x88, 0x8c, 0x2e, 0x3c, 0xaa, 0x58, 0x3c, 0x83, 0xd2,
	0x2d, 0x4a, 0xa1, 0x84, 0x65, 0x1b, 0x9a, 0x7b, 0x85, 0xe6, 0x2e, 0xbc, 0xc3, 0xbb, 0x61, 0xce,
	0xb8, 0xa0, 0xcd, 0xb7, 0x25, 0x1f, 0x92, 0x58, 0xc8, 0x5c, 0x48, 0x1a, 0x85, 0x12, 0xe8, 0xc2,
	0x8b, 0x40, 0x85, 0x1e, 0x8d, 0x05, 0xe3, 0x06, 0xbf, 0xdf, 0xe2, 0x41, 0x13, 0xd1, 0x36, 0x30,
	0xd0, 0x41, 0x2a, 0x52, 0xd1, 0xe6, 0xf5, 0xa9, 0xcd, 0x8e, 0xeb, 0x1d, 0x7c, 0xfd, 0x3d, 0x8b,
	0x67, 0xa7, 0x7c, 0x2a, 0x2c, 0x82, 0xaf, 0x69, 0xef, 0x80, 0x25, 0x36, 0x1a, 0x21, 0x67, 0xd7,
	0xdf, 0xfb, 0xf2, 0xe7, 0xdb, 0x13, 0x34, 0xd9, 0xd7, 0xd9, 0xd3, 0xc4, 0x7a, 0x88, 0xb1, 0x6e,
	0x3d, 0x60, 0x3c, 0x81, 0xa5, 0xbd, 0x33, 0x42, 0x4e, 0x7f, 0x43, 0x19, 0xa8, 0x46, 0x24, 0x81,
	0xa5, 0xf5, 0x0e, 0xdf, 0xd9, 0x5e, 0x25, 0x48, 0x4b, 0x21, 0xa5, 0xdd, 0x1f, 0x21, 0x67, 0xe0,
	0x3b, 0x97, 0xab, 0xe1, 0xbd, 0x2a, 0xcc, 0xb3, 0x17, 0xe3, 0x0e, 0x61, 0xfc, 0xe3, 0xfb, 0x11,
	0x36, 0xdd, 0xbe, 0x82, 0x78, 0x72, 0x7b, 0x8b, 0x9f, 0x68, 0xd8, 0x7a, 0x8d, 0x6f, 0xfd, 0xab,
	0xe0, 0xa0, 0xec, 0xdd, 0x46, 0xf0, 0xf1, 0xe5, 0x6a, 0x78, 0xd0, 0x15, 0xe4, 0xa0, 0xba, 0x72,
	0x37, 0xb7, 0xe8, 0x1b, 0x50, 0x56, 0x81, 0xf1, 0x14, 0x40, 0x1b, 0x7f, 0x52, 0x67, 0xf6, 0xde,
	0xa8, 0xef, 0xdc, 0x78, 0xf6, 0xc0, 0x35, 0x74, 0x3d, 0x58, 0xd7, 0x0c, 0x56, 0xd7, 0xbe, 0x14,
	0x8c, 0xfb, 0xc7, 0xe7, 0xab, 0x61, 0xef, 0xeb, 0xaf, 0xe1, 0xd3, 0x94, 0xa9, 0xb3, 0x79, 0xe4,
	0xc6, 0x22, 0x37, 0xb3, 0x35, 0xbf, 0x23, 0x99, 0xcc, 0xa8, 0xaa, 0x0a, 0x90, 0x9b, 0x1a, 0x39,
	0x19, 0x4c, 0x01, 0x4e, 0x1a, 0x0f, 0xff, 0xed, 0x79, 0x4d, 0xd0, 0x45, 0x4d, 0xd0, 0xef, 0x9a,
	0xa0, 0xcf, 0x6b, 0xd2, 0xbb, 0x58, 0x93, 0xde, 0xcf, 0x35, 0xe9, 0x7d, 0x78, 0xfe, 0x9f, 0xa2,
	0xd9, 0x83, 0x2c, 0xac, 0xa0, 0xdc, 0x04, 0x74, 0xd9, 0xd9, 0x9e, 0xc6, 0x24, 0xda, 0x6f, 0x1e,
	0xef, 0xf8, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0x30, 0xaf, 0x4a, 0x63, 0x02, 0x00, 0x00,
}

func (m *TickInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TickInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TickInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeGrowth) > 0 {
		for iNdEx := len(m.FeeGrowth) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeGrowth[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTicker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.LiquidityNet) > 0 {
		i -= len(m.LiquidityNet)
		copy(dAtA[i:], m.LiquidityNet)
		i = encodeVarintTicker(dAtA, i, uint64(len(m.LiquidityNet)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LiquidityGross) > 0 {
		i -= len(m.LiquidityGross)
		copy(dAtA[i:], m.LiquidityGross)
		i = encodeVarintTicker(dAtA, i, uint64(len(m.LiquidityGross)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TickIndex != 0 {
		i = encodeVarintTicker(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintTicker(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTicker(dAtA []byte, offset int, v uint64) int {
	offset -= sovTicker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TickInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovTicker(uint64(m.PoolId))
	}
	if m.TickIndex != 0 {
		n += 1 + sovTicker(uint64(m.TickIndex))
	}
	l = len(m.LiquidityGross)
	if l > 0 {
		n += 1 + l + sovTicker(uint64(l))
	}
	l = len(m.LiquidityNet)
	if l > 0 {
		n += 1 + l + sovTicker(uint64(l))
	}
	if len(m.FeeGrowth) > 0 {
		for _, e := range m.FeeGrowth {
			l = e.Size()
			n += 1 + l + sovTicker(uint64(l))
		}
	}
	return n
}

func sovTicker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTicker(x uint64) (n int) {
	return sovTicker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TickInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTicker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityGross", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTicker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityGross = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityNet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTicker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityNet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeGrowth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTicker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTicker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeGrowth = append(m.FeeGrowth, types.DecCoin{})
			if err := m.FeeGrowth[len(m.FeeGrowth)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTicker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTicker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTicker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTicker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTicker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTicker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTicker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTicker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTicker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTicker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTicker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTicker = fmt.Errorf("proto: unexpected end of group")
)
