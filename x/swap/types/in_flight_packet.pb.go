// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/swap/in_flight_packet.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PacketIndex
type PacketIndex struct {
	PortId    string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Sequence  uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *PacketIndex) Reset()         { *m = PacketIndex{} }
func (m *PacketIndex) String() string { return proto.CompactTextString(m) }
func (*PacketIndex) ProtoMessage()    {}
func (*PacketIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_80eca52a3b33713a, []int{0}
}
func (m *PacketIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketIndex.Merge(m, src)
}
func (m *PacketIndex) XXX_Size() int {
	return m.Size()
}
func (m *PacketIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketIndex.DiscardUnknown(m)
}

var xxx_messageInfo_PacketIndex proto.InternalMessageInfo

func (m *PacketIndex) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *PacketIndex) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *PacketIndex) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// IncomingInFlightPacket
type IncomingInFlightPacket struct {
	Index            PacketIndex           `protobuf:"bytes,1,opt,name=index,proto3" json:"index"`
	Data             []byte                `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	SrcPortId        string                `protobuf:"bytes,3,opt,name=src_port_id,json=srcPortId,proto3" json:"src_port_id,omitempty"`
	SrcChannelId     string                `protobuf:"bytes,4,opt,name=src_channel_id,json=srcChannelId,proto3" json:"src_channel_id,omitempty"`
	TimeoutHeight    string                `protobuf:"bytes,5,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height,omitempty"`
	TimeoutTimestamp uint64                `protobuf:"varint,6,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty"`
	Ack              []byte                `protobuf:"bytes,7,opt,name=ack,proto3" json:"ack,omitempty"`
	Result           RouteResult           `protobuf:"bytes,8,opt,name=result,proto3" json:"result"`
	InterfaceFee     cosmossdk_io_math.Int `protobuf:"bytes,9,opt,name=interface_fee,json=interfaceFee,proto3,customtype=cosmossdk.io/math.Int" json:"interface_fee"`
	// change
	//
	// Types that are valid to be assigned to Change:
	//	*IncomingInFlightPacket_OutgoingIndexChange
	//	*IncomingInFlightPacket_AckChange
	Change isIncomingInFlightPacket_Change `protobuf_oneof:"change"`
	// forward
	//
	// Types that are valid to be assigned to Forward:
	//	*IncomingInFlightPacket_OutgoingIndexForward
	//	*IncomingInFlightPacket_AckForward
	Forward isIncomingInFlightPacket_Forward `protobuf_oneof:"forward"`
}

func (m *IncomingInFlightPacket) Reset()         { *m = IncomingInFlightPacket{} }
func (m *IncomingInFlightPacket) String() string { return proto.CompactTextString(m) }
func (*IncomingInFlightPacket) ProtoMessage()    {}
func (*IncomingInFlightPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_80eca52a3b33713a, []int{1}
}
func (m *IncomingInFlightPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncomingInFlightPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncomingInFlightPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncomingInFlightPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncomingInFlightPacket.Merge(m, src)
}
func (m *IncomingInFlightPacket) XXX_Size() int {
	return m.Size()
}
func (m *IncomingInFlightPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_IncomingInFlightPacket.DiscardUnknown(m)
}

var xxx_messageInfo_IncomingInFlightPacket proto.InternalMessageInfo

type isIncomingInFlightPacket_Change interface {
	isIncomingInFlightPacket_Change()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isIncomingInFlightPacket_Forward interface {
	isIncomingInFlightPacket_Forward()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IncomingInFlightPacket_OutgoingIndexChange struct {
	OutgoingIndexChange *PacketIndex `protobuf:"bytes,10,opt,name=outgoing_index_change,json=outgoingIndexChange,proto3,oneof" json:"outgoing_index_change,omitempty"`
}
type IncomingInFlightPacket_AckChange struct {
	AckChange []byte `protobuf:"bytes,11,opt,name=ack_change,json=ackChange,proto3,oneof" json:"ack_change,omitempty"`
}
type IncomingInFlightPacket_OutgoingIndexForward struct {
	OutgoingIndexForward *PacketIndex `protobuf:"bytes,12,opt,name=outgoing_index_forward,json=outgoingIndexForward,proto3,oneof" json:"outgoing_index_forward,omitempty"`
}
type IncomingInFlightPacket_AckForward struct {
	AckForward []byte `protobuf:"bytes,13,opt,name=ack_forward,json=ackForward,proto3,oneof" json:"ack_forward,omitempty"`
}

func (*IncomingInFlightPacket_OutgoingIndexChange) isIncomingInFlightPacket_Change()   {}
func (*IncomingInFlightPacket_AckChange) isIncomingInFlightPacket_Change()             {}
func (*IncomingInFlightPacket_OutgoingIndexForward) isIncomingInFlightPacket_Forward() {}
func (*IncomingInFlightPacket_AckForward) isIncomingInFlightPacket_Forward()           {}

func (m *IncomingInFlightPacket) GetChange() isIncomingInFlightPacket_Change {
	if m != nil {
		return m.Change
	}
	return nil
}
func (m *IncomingInFlightPacket) GetForward() isIncomingInFlightPacket_Forward {
	if m != nil {
		return m.Forward
	}
	return nil
}

func (m *IncomingInFlightPacket) GetIndex() PacketIndex {
	if m != nil {
		return m.Index
	}
	return PacketIndex{}
}

func (m *IncomingInFlightPacket) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *IncomingInFlightPacket) GetSrcPortId() string {
	if m != nil {
		return m.SrcPortId
	}
	return ""
}

func (m *IncomingInFlightPacket) GetSrcChannelId() string {
	if m != nil {
		return m.SrcChannelId
	}
	return ""
}

func (m *IncomingInFlightPacket) GetTimeoutHeight() string {
	if m != nil {
		return m.TimeoutHeight
	}
	return ""
}

func (m *IncomingInFlightPacket) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *IncomingInFlightPacket) GetAck() []byte {
	if m != nil {
		return m.Ack
	}
	return nil
}

func (m *IncomingInFlightPacket) GetResult() RouteResult {
	if m != nil {
		return m.Result
	}
	return RouteResult{}
}

func (m *IncomingInFlightPacket) GetOutgoingIndexChange() *PacketIndex {
	if x, ok := m.GetChange().(*IncomingInFlightPacket_OutgoingIndexChange); ok {
		return x.OutgoingIndexChange
	}
	return nil
}

func (m *IncomingInFlightPacket) GetAckChange() []byte {
	if x, ok := m.GetChange().(*IncomingInFlightPacket_AckChange); ok {
		return x.AckChange
	}
	return nil
}

func (m *IncomingInFlightPacket) GetOutgoingIndexForward() *PacketIndex {
	if x, ok := m.GetForward().(*IncomingInFlightPacket_OutgoingIndexForward); ok {
		return x.OutgoingIndexForward
	}
	return nil
}

func (m *IncomingInFlightPacket) GetAckForward() []byte {
	if x, ok := m.GetForward().(*IncomingInFlightPacket_AckForward); ok {
		return x.AckForward
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IncomingInFlightPacket) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IncomingInFlightPacket_OutgoingIndexChange)(nil),
		(*IncomingInFlightPacket_AckChange)(nil),
		(*IncomingInFlightPacket_OutgoingIndexForward)(nil),
		(*IncomingInFlightPacket_AckForward)(nil),
	}
}

// OutgoingInFlightPacket
type OutgoingInFlightPacket struct {
	Index            PacketIndex `protobuf:"bytes,1,opt,name=index,proto3" json:"index"`
	AckWaitingIndex  PacketIndex `protobuf:"bytes,2,opt,name=ack_waiting_index,json=ackWaitingIndex,proto3" json:"ack_waiting_index"`
	RetriesRemaining int32       `protobuf:"varint,3,opt,name=retries_remaining,json=retriesRemaining,proto3" json:"retries_remaining,omitempty"`
}

func (m *OutgoingInFlightPacket) Reset()         { *m = OutgoingInFlightPacket{} }
func (m *OutgoingInFlightPacket) String() string { return proto.CompactTextString(m) }
func (*OutgoingInFlightPacket) ProtoMessage()    {}
func (*OutgoingInFlightPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_80eca52a3b33713a, []int{2}
}
func (m *OutgoingInFlightPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutgoingInFlightPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingInFlightPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutgoingInFlightPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingInFlightPacket.Merge(m, src)
}
func (m *OutgoingInFlightPacket) XXX_Size() int {
	return m.Size()
}
func (m *OutgoingInFlightPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingInFlightPacket.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingInFlightPacket proto.InternalMessageInfo

func (m *OutgoingInFlightPacket) GetIndex() PacketIndex {
	if m != nil {
		return m.Index
	}
	return PacketIndex{}
}

func (m *OutgoingInFlightPacket) GetAckWaitingIndex() PacketIndex {
	if m != nil {
		return m.AckWaitingIndex
	}
	return PacketIndex{}
}

func (m *OutgoingInFlightPacket) GetRetriesRemaining() int32 {
	if m != nil {
		return m.RetriesRemaining
	}
	return 0
}

func init() {
	proto.RegisterType((*PacketIndex)(nil), "sunrise.swap.PacketIndex")
	proto.RegisterType((*IncomingInFlightPacket)(nil), "sunrise.swap.IncomingInFlightPacket")
	proto.RegisterType((*OutgoingInFlightPacket)(nil), "sunrise.swap.OutgoingInFlightPacket")
}

func init() {
	proto.RegisterFile("sunrise/swap/in_flight_packet.proto", fileDescriptor_80eca52a3b33713a)
}

var fileDescriptor_80eca52a3b33713a = []byte{
	// 619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x5d, 0x4f, 0x13, 0x41,
	0x14, 0xed, 0x4a, 0x5b, 0xe8, 0x6d, 0x41, 0x18, 0x01, 0x17, 0x12, 0x0b, 0xa2, 0x26, 0x24, 0xe8,
	0x36, 0xd1, 0x18, 0xdf, 0x4b, 0xd2, 0xb0, 0xf1, 0x01, 0xdc, 0x98, 0x98, 0xf8, 0xb2, 0x19, 0x66,
	0xa7, 0xdb, 0x49, 0xbb, 0x33, 0x75, 0x66, 0x36, 0xc0, 0xbf, 0xf0, 0xcd, 0x3f, 0xe2, 0x8f, 0xc0,
	0x37, 0xe2, 0x93, 0xf1, 0x81, 0x18, 0xf8, 0x23, 0x66, 0x3e, 0xb6, 0x01, 0x63, 0x82, 0x0f, 0x3e,
	0x75, 0xe6, 0xdc, 0x73, 0xef, 0x39, 0x67, 0xf7, 0x76, 0xe1, 0x89, 0x2a, 0xb9, 0x64, 0x8a, 0xf6,
	0xd4, 0x09, 0x9e, 0xf6, 0x18, 0x4f, 0x87, 0x13, 0x96, 0x8f, 0x74, 0x3a, 0xc5, 0x64, 0x4c, 0x75,
	0x34, 0x95, 0x42, 0x0b, 0xd4, 0xf1, 0xa4, 0xc8, 0x90, 0x36, 0x37, 0x88, 0x50, 0x85, 0x50, 0xa9,
	0xad, 0xf5, 0xdc, 0xc5, 0x11, 0x37, 0x57, 0x73, 0x91, 0x0b, 0x87, 0x9b, 0x93, 0x47, 0xc3, 0x5b,
	0x1a, 0x52, 0x94, 0x9a, 0xba, 0xca, 0x0e, 0x86, 0xf6, 0x91, 0x15, 0x8a, 0x79, 0x46, 0x4f, 0xd1,
	0x43, 0x98, 0x9f, 0x0a, 0xa9, 0x53, 0x96, 0x85, 0xc1, 0x76, 0xb0, 0xdb, 0x4a, 0x9a, 0xe6, 0x1a,
	0x67, 0xe8, 0x11, 0x00, 0x19, 0x61, 0xce, 0xe9, 0xc4, 0xd4, 0xee, 0xd9, 0x5a, 0xcb, 0x23, 0x71,
	0x86, 0x36, 0x61, 0x41, 0xd1, 0x4f, 0x25, 0xe5, 0x84, 0x86, 0x73, 0xdb, 0xc1, 0x6e, 0x3d, 0x99,
	0xdd, 0x77, 0xbe, 0x34, 0x60, 0x3d, 0xe6, 0x44, 0x14, 0x8c, 0xe7, 0x31, 0x1f, 0xd8, 0x74, 0x4e,
	0x13, 0xbd, 0x86, 0x06, 0x33, 0xba, 0x56, 0xac, 0xfd, 0x72, 0x23, 0xba, 0x19, 0x33, 0xba, 0x61,
	0xac, 0x5f, 0x3f, 0xbf, 0xdc, 0xaa, 0x25, 0x8e, 0x8d, 0x10, 0xd4, 0x33, 0xac, 0xb1, 0xb5, 0xd1,
	0x49, 0xec, 0x19, 0x75, 0xa1, 0xad, 0x24, 0x49, 0x2b, 0xf7, 0x73, 0xce, 0xa1, 0x92, 0xe4, 0xc8,
	0x05, 0x78, 0x0a, 0x4b, 0xa6, 0x7e, 0x23, 0x44, 0xdd, 0x52, 0x3a, 0x4a, 0x92, 0xfd, 0x59, 0x8e,
	0x67, 0xb0, 0xa4, 0x59, 0x41, 0x45, 0xa9, 0xd3, 0x11, 0x35, 0x46, 0xc3, 0x86, 0x65, 0x2d, 0x7a,
	0xf4, 0xc0, 0x82, 0x68, 0x0f, 0x56, 0x2a, 0x9a, 0xf9, 0x55, 0x1a, 0x17, 0xd3, 0xb0, 0x69, 0x73,
	0x2f, 0xfb, 0xc2, 0xfb, 0x0a, 0x47, 0xcb, 0x30, 0x87, 0xc9, 0x38, 0x9c, 0xb7, 0x66, 0xcd, 0x11,
	0xbd, 0x81, 0xa6, 0xa4, 0xaa, 0x9c, 0xe8, 0x70, 0xe1, 0x6f, 0xb9, 0x13, 0xf3, 0x7e, 0x12, 0x4b,
	0xf0, 0xb9, 0x3d, 0x1d, 0x1d, 0xc1, 0x22, 0xe3, 0x9a, 0xca, 0x21, 0x26, 0x34, 0x1d, 0x52, 0x1a,
	0xb6, 0x8c, 0xbb, 0xfe, 0x9e, 0x21, 0xfd, 0xbc, 0xdc, 0x5a, 0x73, 0xab, 0xa0, 0xb2, 0x71, 0xc4,
	0x44, 0xaf, 0xc0, 0x7a, 0x14, 0xc5, 0x5c, 0x7f, 0xff, 0xfa, 0x02, 0xfc, 0x8e, 0xc4, 0x5c, 0x27,
	0x9d, 0xd9, 0x84, 0x01, 0xa5, 0xe8, 0x10, 0xd6, 0x44, 0xa9, 0x73, 0xc1, 0x78, 0x9e, 0xda, 0x87,
	0x6b, 0x9f, 0x50, 0x4e, 0x43, 0xb8, 0xe3, 0x8d, 0x1c, 0xd4, 0x92, 0x07, 0x55, 0xa7, 0x05, 0xf6,
	0x6d, 0x1f, 0xda, 0x02, 0xc0, 0x64, 0x5c, 0x4d, 0x69, 0x9b, 0xd0, 0x07, 0xb5, 0xa4, 0x85, 0xc9,
	0xd8, 0x13, 0xde, 0xc1, 0xfa, 0x1f, 0x8a, 0x43, 0x21, 0x4f, 0xb0, 0xcc, 0xc2, 0xce, 0x5d, 0x92,
	0x41, 0xb2, 0x7a, 0x4b, 0x72, 0xe0, 0x1a, 0xd1, 0x63, 0x68, 0x1b, 0xcd, 0x6a, 0xce, 0xa2, 0x15,
	0x0d, 0x12, 0x63, 0xc4, 0x53, 0xfa, 0x0b, 0xd0, 0x74, 0x96, 0xfa, 0x2d, 0x98, 0xf7, 0xc4, 0x9d,
	0x6f, 0x01, 0xac, 0x1f, 0xce, 0x06, 0xfe, 0x8f, 0xcd, 0x7c, 0x0b, 0x2b, 0xc6, 0xc9, 0x09, 0x66,
	0x7a, 0x96, 0xcf, 0xae, 0xe9, 0x3f, 0x8c, 0xb8, 0x8f, 0xc9, 0xf8, 0x83, 0x6b, 0x74, 0x7f, 0xc6,
	0x3d, 0x58, 0x91, 0x54, 0x4b, 0x46, 0x55, 0x2a, 0x69, 0x81, 0x19, 0x67, 0x3c, 0xb7, 0x8b, 0xdd,
	0x48, 0x96, 0x7d, 0x21, 0xa9, 0xf0, 0xfe, 0xe0, 0xfc, 0xaa, 0x1b, 0x5c, 0x5c, 0x75, 0x83, 0x5f,
	0x57, 0xdd, 0xe0, 0xf3, 0x75, 0xb7, 0x76, 0x71, 0xdd, 0xad, 0xfd, 0xb8, 0xee, 0xd6, 0x3e, 0x3e,
	0xcf, 0x99, 0x1e, 0x95, 0xc7, 0x11, 0x11, 0x45, 0xcf, 0x5b, 0x98, 0xe0, 0x33, 0x2a, 0xab, 0x4b,
	0xef, 0xd4, 0x7d, 0x16, 0xf4, 0xd9, 0x94, 0xaa, 0xe3, 0xa6, 0xfd, 0x2e, 0xbc, 0xfa, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0x55, 0x62, 0x5b, 0xdd, 0x97, 0x04, 0x00, 0x00,
}

func (m *PacketIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintInFlightPacket(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IncomingInFlightPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncomingInFlightPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncomingInFlightPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Forward != nil {
		{
			size := m.Forward.Size()
			i -= size
			if _, err := m.Forward.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Change != nil {
		{
			size := m.Change.Size()
			i -= size
			if _, err := m.Change.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	{
		size := m.InterfaceFee.Size()
		i -= size
		if _, err := m.InterfaceFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInFlightPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInFlightPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Ack) > 0 {
		i -= len(m.Ack)
		copy(dAtA[i:], m.Ack)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.Ack)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintInFlightPacket(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TimeoutHeight) > 0 {
		i -= len(m.TimeoutHeight)
		copy(dAtA[i:], m.TimeoutHeight)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.TimeoutHeight)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SrcChannelId) > 0 {
		i -= len(m.SrcChannelId)
		copy(dAtA[i:], m.SrcChannelId)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.SrcChannelId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SrcPortId) > 0 {
		i -= len(m.SrcPortId)
		copy(dAtA[i:], m.SrcPortId)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.SrcPortId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInFlightPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *IncomingInFlightPacket_OutgoingIndexChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncomingInFlightPacket_OutgoingIndexChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutgoingIndexChange != nil {
		{
			size, err := m.OutgoingIndexChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInFlightPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *IncomingInFlightPacket_AckChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncomingInFlightPacket_AckChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AckChange != nil {
		i -= len(m.AckChange)
		copy(dAtA[i:], m.AckChange)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.AckChange)))
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *IncomingInFlightPacket_OutgoingIndexForward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncomingInFlightPacket_OutgoingIndexForward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutgoingIndexForward != nil {
		{
			size, err := m.OutgoingIndexForward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInFlightPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *IncomingInFlightPacket_AckForward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncomingInFlightPacket_AckForward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AckForward != nil {
		i -= len(m.AckForward)
		copy(dAtA[i:], m.AckForward)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.AckForward)))
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *OutgoingInFlightPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingInFlightPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingInFlightPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RetriesRemaining != 0 {
		i = encodeVarintInFlightPacket(dAtA, i, uint64(m.RetriesRemaining))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.AckWaitingIndex.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInFlightPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInFlightPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintInFlightPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovInFlightPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PacketIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovInFlightPacket(uint64(m.Sequence))
	}
	return n
}

func (m *IncomingInFlightPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Index.Size()
	n += 1 + l + sovInFlightPacket(uint64(l))
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	l = len(m.SrcPortId)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	l = len(m.SrcChannelId)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	l = len(m.TimeoutHeight)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovInFlightPacket(uint64(m.TimeoutTimestamp))
	}
	l = len(m.Ack)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	l = m.Result.Size()
	n += 1 + l + sovInFlightPacket(uint64(l))
	l = m.InterfaceFee.Size()
	n += 1 + l + sovInFlightPacket(uint64(l))
	if m.Change != nil {
		n += m.Change.Size()
	}
	if m.Forward != nil {
		n += m.Forward.Size()
	}
	return n
}

func (m *IncomingInFlightPacket_OutgoingIndexChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutgoingIndexChange != nil {
		l = m.OutgoingIndexChange.Size()
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	return n
}
func (m *IncomingInFlightPacket_AckChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AckChange != nil {
		l = len(m.AckChange)
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	return n
}
func (m *IncomingInFlightPacket_OutgoingIndexForward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutgoingIndexForward != nil {
		l = m.OutgoingIndexForward.Size()
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	return n
}
func (m *IncomingInFlightPacket_AckForward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AckForward != nil {
		l = len(m.AckForward)
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	return n
}
func (m *OutgoingInFlightPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Index.Size()
	n += 1 + l + sovInFlightPacket(uint64(l))
	l = m.AckWaitingIndex.Size()
	n += 1 + l + sovInFlightPacket(uint64(l))
	if m.RetriesRemaining != 0 {
		n += 1 + sovInFlightPacket(uint64(m.RetriesRemaining))
	}
	return n
}

func sovInFlightPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInFlightPacket(x uint64) (n int) {
	return sovInFlightPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PacketIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInFlightPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInFlightPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncomingInFlightPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInFlightPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncomingInFlightPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncomingInFlightPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeoutHeight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ack = append(m.Ack[:0], dAtA[iNdEx:postIndex]...)
			if m.Ack == nil {
				m.Ack = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterfaceFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingIndexChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PacketIndex{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Change = &IncomingInFlightPacket_OutgoingIndexChange{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckChange", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Change = &IncomingInFlightPacket_AckChange{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingIndexForward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PacketIndex{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Forward = &IncomingInFlightPacket_OutgoingIndexForward{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckForward", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Forward = &IncomingInFlightPacket_AckForward{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInFlightPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutgoingInFlightPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInFlightPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingInFlightPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingInFlightPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckWaitingIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AckWaitingIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetriesRemaining", wireType)
			}
			m.RetriesRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetriesRemaining |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInFlightPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInFlightPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInFlightPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInFlightPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInFlightPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInFlightPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInFlightPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInFlightPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInFlightPacket = fmt.Errorf("proto: unexpected end of group")
)
