// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/shareclass/v1/bond.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValidatorBond
type ValidatorBond struct {
	ValidatorAddress string     `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Amount           types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *ValidatorBond) Reset()         { *m = ValidatorBond{} }
func (m *ValidatorBond) String() string { return proto.CompactTextString(m) }
func (*ValidatorBond) ProtoMessage()    {}
func (*ValidatorBond) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eab427b31472399, []int{0}
}
func (m *ValidatorBond) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorBond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorBond.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorBond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorBond.Merge(m, src)
}
func (m *ValidatorBond) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorBond) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorBond.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorBond proto.InternalMessageInfo

func (m *ValidatorBond) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *ValidatorBond) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// Unbonding
type Unbonding struct {
	Id             uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address        string     `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	CompletionTime time.Time  `protobuf:"bytes,3,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time"`
	Amount         types.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount"`
}

func (m *Unbonding) Reset()         { *m = Unbonding{} }
func (m *Unbonding) String() string { return proto.CompactTextString(m) }
func (*Unbonding) ProtoMessage()    {}
func (*Unbonding) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eab427b31472399, []int{1}
}
func (m *Unbonding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Unbonding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Unbonding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Unbonding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unbonding.Merge(m, src)
}
func (m *Unbonding) XXX_Size() int {
	return m.Size()
}
func (m *Unbonding) XXX_DiscardUnknown() {
	xxx_messageInfo_Unbonding.DiscardUnknown(m)
}

var xxx_messageInfo_Unbonding proto.InternalMessageInfo

func (m *Unbonding) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Unbonding) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Unbonding) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

func (m *Unbonding) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*ValidatorBond)(nil), "sunrise.shareclass.v1.ValidatorBond")
	proto.RegisterType((*Unbonding)(nil), "sunrise.shareclass.v1.Unbonding")
}

func init() { proto.RegisterFile("sunrise/shareclass/v1/bond.proto", fileDescriptor_4eab427b31472399) }

var fileDescriptor_4eab427b31472399 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xbd, 0xae, 0xd3, 0x30,
	0x18, 0x8d, 0x43, 0x75, 0xe1, 0x1a, 0x71, 0x81, 0xe8, 0x22, 0xa5, 0x95, 0x48, 0x4b, 0xa7, 0x2e,
	0xb5, 0x95, 0x32, 0x30, 0x13, 0x56, 0x60, 0x08, 0x3f, 0x03, 0x4b, 0xe5, 0x24, 0x26, 0xb5, 0x94,
	0xf8, 0x8b, 0x62, 0x27, 0xa2, 0x6f, 0xd1, 0x91, 0x07, 0xe9, 0x43, 0x74, 0xac, 0xba, 0xc0, 0x04,
	0xa8, 0x7d, 0x11, 0x94, 0xc4, 0xa1, 0x85, 0x8d, 0x2d, 0xe7, 0x7c, 0xe7, 0x73, 0xce, 0x39, 0xfa,
	0xf0, 0x44, 0x55, 0xb2, 0x14, 0x8a, 0x53, 0xb5, 0x62, 0x25, 0x8f, 0x33, 0xa6, 0x14, 0xad, 0x7d,
	0x1a, 0x81, 0x4c, 0x48, 0x51, 0x82, 0x06, 0xe7, 0x89, 0x51, 0x90, 0xb3, 0x82, 0xd4, 0xfe, 0xc8,
	0x8b, 0x41, 0xe5, 0xa0, 0x68, 0xc4, 0x14, 0xa7, 0xb5, 0x1f, 0x71, 0xcd, 0x7c, 0x1a, 0x83, 0x90,
	0xdd, 0xda, 0x68, 0xd8, 0xcd, 0x97, 0x2d, 0xa2, 0x1d, 0x30, 0xa3, 0xdb, 0x14, 0x52, 0xe8, 0xf8,
	0xe6, 0xcb, 0xb0, 0xe3, 0x14, 0x20, 0xcd, 0x38, 0x6d, 0x51, 0x54, 0x7d, 0xa6, 0x5a, 0xe4, 0x5c,
	0x69, 0x96, 0x17, 0x9d, 0x60, 0xfa, 0x15, 0xe1, 0x07, 0x1f, 0x59, 0x26, 0x12, 0xa6, 0xa1, 0x0c,
	0x40, 0x26, 0xce, 0x5b, 0xfc, 0xb8, 0xee, 0x89, 0x25, 0x4b, 0x92, 0x92, 0x2b, 0xe5, 0xa2, 0x09,
	0x9a, 0x5d, 0x07, 0xcf, 0x0e, 0xdb, 0xf9, 0x53, 0xf3, 0xd7, 0x3f, 0x4b, 0x2f, 0x3b, 0xc9, 0x3b,
	0x5d, 0x0a, 0x99, 0x86, 0x8f, 0xea, 0x7f, 0x78, 0xe7, 0x05, 0xbe, 0x62, 0x39, 0x54, 0x52, 0xbb,
	0xf6, 0x04, 0xcd, 0xee, 0x2f, 0x86, 0xc4, 0xbc, 0xd0, 0x84, 0x24, 0x26, 0x24, 0x79, 0x05, 0x42,
	0x06, 0x83, 0xdd, 0x8f, 0xb1, 0x15, 0x1a, 0xf9, 0xf4, 0x1b, 0xc2, 0xd7, 0x1f, 0x64, 0x53, 0x9a,
	0x90, 0xa9, 0x73, 0x83, 0x6d, 0x91, 0xb4, 0x3e, 0x06, 0xa1, 0x2d, 0x12, 0x67, 0x81, 0xef, 0xf6,
	0xe6, 0xec, 0xd6, 0x9c, 0x7b, 0xd8, 0xce, 0x6f, 0xcd, 0xd3, 0x7f, 0x7b, 0xea, 0x85, 0xce, 0x1b,
	0xfc, 0x30, 0x86, 0xbc, 0xc8, 0xb8, 0x16, 0x20, 0x97, 0x4d, 0x15, 0xee, 0x9d, 0xd6, 0xd3, 0x88,
	0x74, 0x3d, 0x91, 0xbe, 0x27, 0xf2, 0xbe, 0xef, 0x29, 0xb8, 0xd7, 0x98, 0xda, 0xfc, 0x1c, 0xa3,
	0xf0, 0xe6, 0xbc, 0xdc, 0x8c, 0x2f, 0x92, 0x0d, 0xfe, 0x2b, 0x59, 0xf0, 0x7a, 0x77, 0xf4, 0xd0,
	0xfe, 0xe8, 0xa1, 0x5f, 0x47, 0x0f, 0x6d, 0x4e, 0x9e, 0xb5, 0x3f, 0x79, 0xd6, 0xf7, 0x93, 0x67,
	0x7d, 0x5a, 0xa4, 0x42, 0xaf, 0xaa, 0x88, 0xc4, 0x90, 0x53, 0x73, 0x22, 0x19, 0x5b, 0xf3, 0xb2,
	0x07, 0xf4, 0xcb, 0xe5, 0x4d, 0xe9, 0x75, 0xc1, 0x55, 0x74, 0xd5, 0x9a, 0x7e, 0xfe, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0xf2, 0xae, 0x27, 0xd6, 0x76, 0x02, 0x00, 0x00,
}

func (m *ValidatorBond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorBond) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorBond) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBond(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintBond(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Unbonding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Unbonding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Unbonding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBond(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintBond(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBond(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBond(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBond(dAtA []byte, offset int, v uint64) int {
	offset -= sovBond(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorBond) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovBond(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovBond(uint64(l))
	return n
}

func (m *Unbonding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBond(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBond(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovBond(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovBond(uint64(l))
	return n
}

func sovBond(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBond(x uint64) (n int) {
	return sovBond(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorBond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBond
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorBond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorBond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBond
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBond
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBond
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBond
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBond(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBond
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Unbonding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBond
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Unbonding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Unbonding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBond
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBond
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBond
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBond
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBond
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBond
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBond(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBond
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBond(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBond
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBond
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBond
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBond
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBond
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBond
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBond        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBond          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBond = fmt.Errorf("proto: unexpected end of group")
)
