// Code generated by MockGen. DO NOT EDIT.
// Source: x/staking/types/msg.go
//
// Generated by this command:
//
//	mockgen -source=x/staking/types/msg.go -destination=x/shareclass/testutil/staking_mocks.go -package=testutil

package testutil

import (
	context "context"
	reflect "reflect"

	stakingtypes "github.com/cosmos/cosmos-sdk/x/staking/types"
	gomock "go.uber.org/mock/gomock"
)

// MockStakingMsgServer is a mock of MsgServer interface.
type MockStakingMsgServer struct {
	ctrl     *gomock.Controller
	recorder *MockStakingMsgServerMockRecorder
}

// MockStakingMsgServerMockRecorder is the mock recorder for MockStakingMsgServer.
type MockStakingMsgServerMockRecorder struct {
	mock *MockStakingMsgServer
}

// NewMockStakingMsgServer creates a new mock instance.
func NewMockStakingMsgServer(ctrl *gomock.Controller) *MockStakingMsgServer {
	mock := &MockStakingMsgServer{ctrl: ctrl}
	mock.recorder = &MockStakingMsgServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStakingMsgServer) EXPECT() *MockStakingMsgServerMockRecorder {
	return m.recorder
}

// Delegate mocks base method.
func (m *MockStakingMsgServer) Delegate(ctx context.Context, msg *stakingtypes.MsgDelegate) (*stakingtypes.MsgDelegateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delegate", ctx, msg)
	ret0, _ := ret[0].(*stakingtypes.MsgDelegateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delegate indicates an expected call of Delegate.
func (mr *MockStakingMsgServerMockRecorder) Delegate(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delegate", reflect.TypeOf((*MockStakingMsgServer)(nil).Delegate), ctx, msg)
}

// Undelegate mocks base method.
func (m *MockStakingMsgServer) Undelegate(ctx context.Context, msg *stakingtypes.MsgUndelegate) (*stakingtypes.MsgUndelegateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Undelegate", ctx, msg)
	ret0, _ := ret[0].(*stakingtypes.MsgUndelegateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Undelegate indicates an expected call of Undelegate.
func (mr *MockStakingMsgServerMockRecorder) Undelegate(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Undelegate", reflect.TypeOf((*MockStakingMsgServer)(nil).Undelegate), ctx, msg)
}

// Other methods of stakingtypes.MsgServer can be added here if needed

// MockStakingQueryServer is a mock of QueryServer interface.
type MockStakingQueryServer struct {
	ctrl     *gomock.Controller
	recorder *MockStakingQueryServerMockRecorder
}

// MockStakingQueryServerMockRecorder is the mock recorder for MockStakingQueryServer.
type MockStakingQueryServerMockRecorder struct {
	mock *MockStakingQueryServer
}

// NewMockStakingQueryServer creates a new mock instance.
func NewMockStakingQueryServer(ctrl *gomock.Controller) *MockStakingQueryServer {
	mock := &MockStakingQueryServer{ctrl: ctrl}
	mock.recorder = &MockStakingQueryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStakingQueryServer) EXPECT() *MockStakingQueryServerMockRecorder {
	return m.recorder
}

// Delegation mocks base method.
func (m *MockStakingQueryServer) Delegation(ctx context.Context, req *stakingtypes.QueryDelegationRequest) (*stakingtypes.QueryDelegationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delegation", ctx, req)
	ret0, _ := ret[0].(*stakingtypes.QueryDelegationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delegation indicates an expected call of Delegation.
func (mr *MockStakingQueryServerMockRecorder) Delegation(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delegation", reflect.TypeOf((*MockStakingQueryServer)(nil).Delegation), ctx, req)
}

// Other methods of stakingtypes.QueryServer can be added here if needed
func (m *MockStakingMsgServer) BeginRedelegate(context.Context, *stakingtypes.MsgBeginRedelegate) (*stakingtypes.MsgBeginRedelegateResponse, error) {
	panic("not implemented")
}
func (m *MockStakingMsgServer) CancelUnbondingDelegation(context.Context, *stakingtypes.MsgCancelUnbondingDelegation) (*stakingtypes.MsgCancelUnbondingDelegationResponse, error) {
	panic("not implemented")
}
func (m *MockStakingMsgServer) CreateValidator(context.Context, *stakingtypes.MsgCreateValidator) (*stakingtypes.MsgCreateValidatorResponse, error) {
	panic("not implemented")
}
func (m *MockStakingMsgServer) EditValidator(context.Context, *stakingtypes.MsgEditValidator) (*stakingtypes.MsgEditValidatorResponse, error) {
	panic("not implemented")
}
func (m *MockStakingMsgServer) UpdateParams(context.Context, *stakingtypes.MsgUpdateParams) (*stakingtypes.MsgUpdateParamsResponse, error) {
	panic("not implemented")
}
func (m *MockStakingQueryServer) UnbondingDelegation(context.Context, *stakingtypes.QueryUnbondingDelegationRequest) (*stakingtypes.QueryUnbondingDelegationResponse, error) {
	panic("not implemented")
}
func (m *MockStakingQueryServer) DelegatorDelegations(context.Context, *stakingtypes.QueryDelegatorDelegationsRequest) (*stakingtypes.QueryDelegatorDelegationsResponse, error) {
	panic("not implemented")
}
func (m *MockStakingQueryServer) DelegatorUnbondingDelegations(context.Context, *stakingtypes.QueryDelegatorUnbondingDelegationsRequest) (*stakingtypes.QueryDelegatorUnbondingDelegationsResponse, error) {
	panic("not implemented")
}
func (m *MockStakingQueryServer) Redelegations(context.Context, *stakingtypes.QueryRedelegationsRequest) (*stakingtypes.QueryRedelegationsResponse, error) {
	panic("not implemented")
}
func (m *MockStakingQueryServer) DelegatorValidators(context.Context, *stakingtypes.QueryDelegatorValidatorsRequest) (*stakingtypes.QueryDelegatorValidatorsResponse, error) {
	panic("not implemented")
}
func (m *MockStakingQueryServer) DelegatorValidator(context.Context, *stakingtypes.QueryDelegatorValidatorRequest) (*stakingtypes.QueryDelegatorValidatorResponse, error) {
	panic("not implemented")
}
func (m *MockStakingQueryServer) HistoricalInfo(context.Context, *stakingtypes.QueryHistoricalInfoRequest) (*stakingtypes.QueryHistoricalInfoResponse, error) {
	panic("not implemented")
}
func (m *MockStakingQueryServer) Params(context.Context, *stakingtypes.QueryParamsRequest) (*stakingtypes.QueryParamsResponse, error) {
	panic("not implemented")
}
func (m *MockStakingQueryServer) Pool(context.Context, *stakingtypes.QueryPoolRequest) (*stakingtypes.QueryPoolResponse, error) {
	panic("not implemented")
}
func (m *MockStakingQueryServer) Validator(context.Context, *stakingtypes.QueryValidatorRequest) (*stakingtypes.QueryValidatorResponse, error) {
	panic("not implemented")
}
func (m *MockStakingQueryServer) Validators(context.Context, *stakingtypes.QueryValidatorsRequest) (*stakingtypes.QueryValidatorsResponse, error) {
	panic("not implemented")
}
func (m *MockStakingQueryServer) ValidatorDelegations(context.Context, *stakingtypes.QueryValidatorDelegationsRequest) (*stakingtypes.QueryValidatorDelegationsResponse, error) {
	panic("not implemented")
}
func (m *MockStakingQueryServer) ValidatorUnbondingDelegations(context.Context, *stakingtypes.QueryValidatorUnbondingDelegationsRequest) (*stakingtypes.QueryValidatorUnbondingDelegationsResponse, error) {
	panic("not implemented")
}
