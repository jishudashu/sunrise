// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/lockup/v1/lockup_account.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LockupAccount defines the lockup account.
type LockupAccount struct {
	Owner                  string                `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	StartTime              int64                 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                int64                 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LockupAmountOriginal   cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=lockup_amount_original,json=lockupAmountOriginal,proto3,customtype=cosmossdk.io/math.Int" json:"lockup_amount_original"`
	LockupAmountAdditional cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=lockup_amount_additional,json=lockupAmountAdditional,proto3,customtype=cosmossdk.io/math.Int" json:"lockup_amount_additional"`
}

func (m *LockupAccount) Reset()         { *m = LockupAccount{} }
func (m *LockupAccount) String() string { return proto.CompactTextString(m) }
func (*LockupAccount) ProtoMessage()    {}
func (*LockupAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_453c51fa8fc49e78, []int{0}
}
func (m *LockupAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockupAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockupAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockupAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockupAccount.Merge(m, src)
}
func (m *LockupAccount) XXX_Size() int {
	return m.Size()
}
func (m *LockupAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_LockupAccount.DiscardUnknown(m)
}

var xxx_messageInfo_LockupAccount proto.InternalMessageInfo

func (m *LockupAccount) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *LockupAccount) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *LockupAccount) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func init() {
	proto.RegisterType((*LockupAccount)(nil), "sunrise.lockup.v1.LockupAccount")
}

func init() {
	proto.RegisterFile("sunrise/lockup/v1/lockup_account.proto", fileDescriptor_453c51fa8fc49e78)
}

var fileDescriptor_453c51fa8fc49e78 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xc1, 0x6a, 0xea, 0x40,
	0x14, 0x86, 0x13, 0xbd, 0xde, 0x7b, 0x1d, 0xe8, 0xa2, 0xc1, 0x4a, 0x14, 0x1a, 0xa5, 0x8b, 0x22,
	0x14, 0x27, 0x48, 0x9f, 0x20, 0xae, 0x2a, 0x14, 0x0a, 0xb6, 0xab, 0x6e, 0xc2, 0x98, 0x19, 0xe2,
	0xa0, 0x99, 0x23, 0x33, 0x13, 0x5b, 0xdf, 0xa2, 0x0f, 0xe3, 0x1b, 0x74, 0xe3, 0x52, 0x5c, 0x95,
	0x2e, 0xa4, 0xe8, 0x8b, 0x14, 0x67, 0x62, 0x69, 0x97, 0xdd, 0x9d, 0x73, 0xfe, 0x3f, 0xff, 0x97,
	0xe1, 0x47, 0x97, 0x2a, 0x17, 0x92, 0x2b, 0x16, 0x4e, 0x21, 0x99, 0xe4, 0xb3, 0x70, 0xde, 0x2b,
	0xa6, 0x98, 0x24, 0x09, 0xe4, 0x42, 0xe3, 0x99, 0x04, 0x0d, 0xde, 0x69, 0xe1, 0xc3, 0x56, 0xc5,
	0xf3, 0x5e, 0xb3, 0x91, 0x80, 0xca, 0x40, 0xc5, 0xc6, 0x10, 0xda, 0xc5, 0xba, 0x9b, 0xb5, 0x14,
	0x52, 0xb0, 0xf7, 0xc3, 0x64, 0xaf, 0x17, 0xaf, 0x25, 0x74, 0x72, 0x6b, 0x3e, 0x8f, 0x6c, 0xb6,
	0x87, 0x51, 0x05, 0x9e, 0x04, 0x93, 0xbe, 0xdb, 0x76, 0x3b, 0xd5, 0xbe, 0xbf, 0x59, 0x76, 0x6b,
	0x45, 0x50, 0x44, 0xa9, 0x64, 0x4a, 0xdd, 0x6b, 0xc9, 0x45, 0x3a, 0xb4, 0x36, 0xef, 0x1c, 0x21,
	0xa5, 0x89, 0xd4, 0xb1, 0xe6, 0x19, 0xf3, 0x4b, 0x6d, 0xb7, 0x53, 0x1e, 0x56, 0xcd, 0xe5, 0x81,
	0x67, 0xcc, 0x6b, 0xa0, 0xff, 0x4c, 0x50, 0x2b, 0x96, 0x8d, 0xf8, 0x8f, 0x09, 0x6a, 0x24, 0x82,
	0xea, 0xc7, 0x77, 0x65, 0x07, 0x74, 0x0c, 0x92, 0xa7, 0x5c, 0x90, 0xa9, 0xff, 0xc7, 0xa0, 0xaf,
	0x56, 0xdb, 0x96, 0xf3, 0xbe, 0x6d, 0x9d, 0x59, 0xbc, 0xa2, 0x13, 0xcc, 0x21, 0xcc, 0x88, 0x1e,
	0xe3, 0x81, 0xd0, 0x9b, 0x65, 0x17, 0x15, 0xff, 0x35, 0x10, 0x7a, 0x58, 0xb3, 0x51, 0x91, 0x49,
	0xba, 0x2b, 0x82, 0x3c, 0x86, 0xfc, 0x9f, 0x08, 0x42, 0x29, 0xd7, 0x1c, 0x0e, 0x90, 0xca, 0xef,
	0x21, 0xf5, 0xef, 0x90, 0xe8, 0x2b, 0xaa, 0x7f, 0xb3, 0xda, 0x05, 0xee, 0x7a, 0x17, 0xb8, 0x1f,
	0xbb, 0xc0, 0x7d, 0xd9, 0x07, 0xce, 0x7a, 0x1f, 0x38, 0x6f, 0xfb, 0xc0, 0x79, 0xc4, 0x29, 0xd7,
	0xe3, 0x7c, 0x84, 0x13, 0xc8, 0xc2, 0xa2, 0xae, 0x29, 0x59, 0x30, 0x79, 0x5c, 0xc2, 0xe7, 0x63,
	0xcb, 0x7a, 0x31, 0x63, 0x6a, 0xf4, 0xd7, 0xd4, 0x72, 0xfd, 0x19, 0x00, 0x00, 0xff, 0xff, 0x4e,
	0xd7, 0x5c, 0xc8, 0x04, 0x02, 0x00, 0x00,
}

func (m *LockupAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockupAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockupAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LockupAmountAdditional.Size()
		i -= size
		if _, err := m.LockupAmountAdditional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLockupAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.LockupAmountOriginal.Size()
		i -= size
		if _, err := m.LockupAmountOriginal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLockupAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.EndTime != 0 {
		i = encodeVarintLockupAccount(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != 0 {
		i = encodeVarintLockupAccount(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLockupAccount(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLockupAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovLockupAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LockupAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLockupAccount(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovLockupAccount(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovLockupAccount(uint64(m.EndTime))
	}
	l = m.LockupAmountOriginal.Size()
	n += 1 + l + sovLockupAccount(uint64(l))
	l = m.LockupAmountAdditional.Size()
	n += 1 + l + sovLockupAccount(uint64(l))
	return n
}

func sovLockupAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLockupAccount(x uint64) (n int) {
	return sovLockupAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LockupAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLockupAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockupAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockupAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockupAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockupAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockupAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockupAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockupAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupAmountOriginal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockupAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockupAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockupAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockupAmountOriginal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupAmountAdditional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockupAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockupAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockupAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockupAmountAdditional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLockupAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLockupAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLockupAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLockupAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLockupAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLockupAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLockupAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLockupAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLockupAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLockupAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLockupAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLockupAccount = fmt.Errorf("proto: unexpected end of group")
)
