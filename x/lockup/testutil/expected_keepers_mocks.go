// Code generated by MockGen. DO NOT EDIT.
// Source: x/lockup/types/expected_keepers.go
//
// Generated by this command:
//
//	mockgen -source=x/lockup/types/expected_keepers.go -destination=x/lockup/testutil/mocks/expected_keepers_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	address "cosmossdk.io/core/address"
	types "github.com/cosmos/cosmos-sdk/types"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
	isgomock struct{}
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// AddressCodec mocks base method.
func (m *MockAccountKeeper) AddressCodec() address.Codec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressCodec")
	ret0, _ := ret[0].(address.Codec)
	return ret0
}

// AddressCodec indicates an expected call of AddressCodec.
func (mr *MockAccountKeeperMockRecorder) AddressCodec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressCodec", reflect.TypeOf((*MockAccountKeeper)(nil).AddressCodec))
}

// GetModuleAddress mocks base method.
func (m *MockAccountKeeper) GetModuleAddress(name string) types.AccAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleAddress", name)
	ret0, _ := ret[0].(types.AccAddress)
	return ret0
}

// GetModuleAddress indicates an expected call of GetModuleAddress.
func (mr *MockAccountKeeperMockRecorder) GetModuleAddress(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleAddress", reflect.TypeOf((*MockAccountKeeper)(nil).GetModuleAddress), name)
}

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
	isgomock struct{}
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockBankKeeper) GetBalance(ctx context.Context, addr types.AccAddress, denom string) types.Coin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, addr, denom)
	ret0, _ := ret[0].(types.Coin)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockBankKeeperMockRecorder) GetBalance(ctx, addr, denom any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBankKeeper)(nil).GetBalance), ctx, addr, denom)
}

// SendCoins mocks base method.
func (m *MockBankKeeper) SendCoins(ctx context.Context, fromAddr, toAddr types.AccAddress, amt types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoins", ctx, fromAddr, toAddr, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoins indicates an expected call of SendCoins.
func (mr *MockBankKeeperMockRecorder) SendCoins(ctx, fromAddr, toAddr, amt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoins", reflect.TypeOf((*MockBankKeeper)(nil).SendCoins), ctx, fromAddr, toAddr, amt)
}

// MockStakingKeeper is a mock of StakingKeeper interface.
type MockStakingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockStakingKeeperMockRecorder
	isgomock struct{}
}

// MockStakingKeeperMockRecorder is the mock recorder for MockStakingKeeper.
type MockStakingKeeperMockRecorder struct {
	mock *MockStakingKeeper
}

// NewMockStakingKeeper creates a new mock instance.
func NewMockStakingKeeper(ctrl *gomock.Controller) *MockStakingKeeper {
	mock := &MockStakingKeeper{ctrl: ctrl}
	mock.recorder = &MockStakingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStakingKeeper) EXPECT() *MockStakingKeeperMockRecorder {
	return m.recorder
}

// ValidatorAddressCodec mocks base method.
func (m *MockStakingKeeper) ValidatorAddressCodec() address.Codec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorAddressCodec")
	ret0, _ := ret[0].(address.Codec)
	return ret0
}

// ValidatorAddressCodec indicates an expected call of ValidatorAddressCodec.
func (mr *MockStakingKeeperMockRecorder) ValidatorAddressCodec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorAddressCodec", reflect.TypeOf((*MockStakingKeeper)(nil).ValidatorAddressCodec))
}

// MockTokenConverterKeeper is a mock of TokenConverterKeeper interface.
type MockTokenConverterKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockTokenConverterKeeperMockRecorder
	isgomock struct{}
}

// MockTokenConverterKeeperMockRecorder is the mock recorder for MockTokenConverterKeeper.
type MockTokenConverterKeeperMockRecorder struct {
	mock *MockTokenConverterKeeper
}

// NewMockTokenConverterKeeper creates a new mock instance.
func NewMockTokenConverterKeeper(ctrl *gomock.Controller) *MockTokenConverterKeeper {
	mock := &MockTokenConverterKeeper{ctrl: ctrl}
	mock.recorder = &MockTokenConverterKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenConverterKeeper) EXPECT() *MockTokenConverterKeeperMockRecorder {
	return m.recorder
}

// GetTransferableDenom mocks base method.
func (m *MockTokenConverterKeeper) GetTransferableDenom(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferableDenom", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferableDenom indicates an expected call of GetTransferableDenom.
func (mr *MockTokenConverterKeeperMockRecorder) GetTransferableDenom(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferableDenom", reflect.TypeOf((*MockTokenConverterKeeper)(nil).GetTransferableDenom), ctx)
}

// MockShareclassKeeper is a mock of ShareclassKeeper interface.
type MockShareclassKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockShareclassKeeperMockRecorder
	isgomock struct{}
}

// MockShareclassKeeperMockRecorder is the mock recorder for MockShareclassKeeper.
type MockShareclassKeeperMockRecorder struct {
	mock *MockShareclassKeeper
}

// NewMockShareclassKeeper creates a new mock instance.
func NewMockShareclassKeeper(ctrl *gomock.Controller) *MockShareclassKeeper {
	mock := &MockShareclassKeeper{ctrl: ctrl}
	mock.recorder = &MockShareclassKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShareclassKeeper) EXPECT() *MockShareclassKeeperMockRecorder {
	return m.recorder
}

// ClaimRewards mocks base method.
func (m *MockShareclassKeeper) ClaimRewards(ctx context.Context, sender types.AccAddress, validatorAddr types.ValAddress) (types.Coins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimRewards", ctx, sender, validatorAddr)
	ret0, _ := ret[0].(types.Coins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimRewards indicates an expected call of ClaimRewards.
func (mr *MockShareclassKeeperMockRecorder) ClaimRewards(ctx, sender, validatorAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimRewards", reflect.TypeOf((*MockShareclassKeeper)(nil).ClaimRewards), ctx, sender, validatorAddr)
}

// Delegate mocks base method.
func (m *MockShareclassKeeper) Delegate(ctx context.Context, sender types.AccAddress, valAddr types.ValAddress, amount types.Coin) (types.Coins, types.Coins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delegate", ctx, sender, valAddr, amount)
	ret0, _ := ret[0].(types.Coins)
	ret1, _ := ret[1].(types.Coins)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Delegate indicates an expected call of Delegate.
func (mr *MockShareclassKeeperMockRecorder) Delegate(ctx, sender, valAddr, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delegate", reflect.TypeOf((*MockShareclassKeeper)(nil).Delegate), ctx, sender, valAddr, amount)
}

// Undelegate mocks base method.
func (m *MockShareclassKeeper) Undelegate(ctx context.Context, sender, recipient types.AccAddress, valAddr types.ValAddress, amount types.Coin) (types.Coin, types.Coins, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Undelegate", ctx, sender, recipient, valAddr, amount)
	ret0, _ := ret[0].(types.Coin)
	ret1, _ := ret[1].(types.Coins)
	ret2, _ := ret[2].(time.Time)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Undelegate indicates an expected call of Undelegate.
func (mr *MockShareclassKeeperMockRecorder) Undelegate(ctx, sender, recipient, valAddr, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Undelegate", reflect.TypeOf((*MockShareclassKeeper)(nil).Undelegate), ctx, sender, recipient, valAddr, amount)
}
