// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/da/v1/published_data.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PublishedDataStatus
type Status int32

const (
	// Default value
	Status_STATUS_UNSPECIFIED Status = 0
	// Verified
	Status_STATUS_VERIFIED Status = 1
	// Rejected
	Status_STATUS_REJECTED Status = 2
	// after processing in the msg_server
	Status_STATUS_MSG_SERVER Status = 3
	// accept the votes from the validators (after preBlocker)
	Status_STATUS_VOTE_EXTENSION Status = 4
	// reported as fraud (after received ChallengeForFraud tx)
	Status_STATUS_CHALLENGE_FOR_FRAUD Status = 5
)

var Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_VERIFIED",
	2: "STATUS_REJECTED",
	3: "STATUS_MSG_SERVER",
	4: "STATUS_VOTE_EXTENSION",
	5: "STATUS_CHALLENGE_FOR_FRAUD",
}

var Status_value = map[string]int32{
	"STATUS_UNSPECIFIED":         0,
	"STATUS_VERIFIED":            1,
	"STATUS_REJECTED":            2,
	"STATUS_MSG_SERVER":          3,
	"STATUS_VOTE_EXTENSION":      4,
	"STATUS_CHALLENGE_FOR_FRAUD": 5,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dbb00f0e2104e63f, []int{0}
}

// PublishedData
type PublishedData struct {
	MetadataUri        string                                   `protobuf:"bytes,1,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
	ParityShardCount   uint64                                   `protobuf:"varint,2,opt,name=parity_shard_count,json=parityShardCount,proto3" json:"parity_shard_count,omitempty"`
	ShardDoubleHashes  [][]byte                                 `protobuf:"bytes,3,rep,name=shard_double_hashes,json=shardDoubleHashes,proto3" json:"shard_double_hashes,omitempty"`
	Timestamp          time.Time                                `protobuf:"bytes,4,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	Status             Status                                   `protobuf:"varint,5,opt,name=status,proto3,enum=sunrise.da.v1.Status" json:"status,omitempty"`
	Publisher          string                                   `protobuf:"bytes,6,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Challenger         string                                   `protobuf:"bytes,7,opt,name=challenger,proto3" json:"challenger,omitempty"`
	Collateral         github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=collateral,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"collateral"`
	ChallengeTimestamp time.Time                                `protobuf:"bytes,9,opt,name=challenge_timestamp,json=challengeTimestamp,proto3,stdtime" json:"challenge_timestamp"`
	DataSourceInfo     string                                   `protobuf:"bytes,10,opt,name=data_source_info,json=dataSourceInfo,proto3" json:"data_source_info,omitempty"`
}

func (m *PublishedData) Reset()         { *m = PublishedData{} }
func (m *PublishedData) String() string { return proto.CompactTextString(m) }
func (*PublishedData) ProtoMessage()    {}
func (*PublishedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbb00f0e2104e63f, []int{0}
}
func (m *PublishedData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishedData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishedData.Merge(m, src)
}
func (m *PublishedData) XXX_Size() int {
	return m.Size()
}
func (m *PublishedData) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishedData.DiscardUnknown(m)
}

var xxx_messageInfo_PublishedData proto.InternalMessageInfo

func (m *PublishedData) GetMetadataUri() string {
	if m != nil {
		return m.MetadataUri
	}
	return ""
}

func (m *PublishedData) GetParityShardCount() uint64 {
	if m != nil {
		return m.ParityShardCount
	}
	return 0
}

func (m *PublishedData) GetShardDoubleHashes() [][]byte {
	if m != nil {
		return m.ShardDoubleHashes
	}
	return nil
}

func (m *PublishedData) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *PublishedData) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_STATUS_UNSPECIFIED
}

func (m *PublishedData) GetPublisher() string {
	if m != nil {
		return m.Publisher
	}
	return ""
}

func (m *PublishedData) GetChallenger() string {
	if m != nil {
		return m.Challenger
	}
	return ""
}

func (m *PublishedData) GetCollateral() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Collateral
	}
	return nil
}

func (m *PublishedData) GetChallengeTimestamp() time.Time {
	if m != nil {
		return m.ChallengeTimestamp
	}
	return time.Time{}
}

func (m *PublishedData) GetDataSourceInfo() string {
	if m != nil {
		return m.DataSourceInfo
	}
	return ""
}

// Proof
type Proof struct {
	MetadataUri string   `protobuf:"bytes,1,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
	Sender      string   `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Indices     []int64  `protobuf:"varint,3,rep,packed,name=indices,proto3" json:"indices,omitempty"`
	Proofs      [][]byte `protobuf:"bytes,4,rep,name=proofs,proto3" json:"proofs,omitempty"`
	IsValidData bool     `protobuf:"varint,5,opt,name=is_valid_data,json=isValidData,proto3" json:"is_valid_data,omitempty"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbb00f0e2104e63f, []int{1}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return m.Size()
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

func (m *Proof) GetMetadataUri() string {
	if m != nil {
		return m.MetadataUri
	}
	return ""
}

func (m *Proof) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Proof) GetIndices() []int64 {
	if m != nil {
		return m.Indices
	}
	return nil
}

func (m *Proof) GetProofs() [][]byte {
	if m != nil {
		return m.Proofs
	}
	return nil
}

func (m *Proof) GetIsValidData() bool {
	if m != nil {
		return m.IsValidData
	}
	return false
}

func init() {
	proto.RegisterEnum("sunrise.da.v1.Status", Status_name, Status_value)
	proto.RegisterType((*PublishedData)(nil), "sunrise.da.v1.PublishedData")
	proto.RegisterType((*Proof)(nil), "sunrise.da.v1.Proof")
}

func init() {
	proto.RegisterFile("sunrise/da/v1/published_data.proto", fileDescriptor_dbb00f0e2104e63f)
}

var fileDescriptor_dbb00f0e2104e63f = []byte{
	// 670 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x52, 0xdb, 0x3a,
	0x14, 0x8d, 0x49, 0x08, 0x44, 0x01, 0x5e, 0x10, 0x0f, 0xc6, 0x64, 0xde, 0x38, 0x79, 0x59, 0x79,
	0x98, 0x87, 0xfd, 0x42, 0xbf, 0x80, 0x24, 0x06, 0xd2, 0xa1, 0x81, 0x91, 0x13, 0xa6, 0xd3, 0x8d,
	0x47, 0xb6, 0x95, 0x44, 0x83, 0x63, 0x65, 0x2c, 0x39, 0x53, 0xfe, 0x82, 0x65, 0x17, 0xfd, 0x82,
	0x6e, 0xfa, 0x1b, 0x2c, 0x59, 0x76, 0x55, 0x3a, 0xf0, 0x23, 0x1d, 0xcb, 0x76, 0x48, 0x77, 0xed,
	0x2a, 0xba, 0xe7, 0x1c, 0x5d, 0xe9, 0xea, 0x9c, 0x18, 0xb4, 0x78, 0x1c, 0x46, 0x94, 0x13, 0xd3,
	0xc7, 0xe6, 0xa2, 0x6d, 0xce, 0x63, 0x37, 0xa0, 0x7c, 0x4a, 0x7c, 0xc7, 0xc7, 0x02, 0x1b, 0xf3,
	0x88, 0x09, 0x06, 0xb7, 0x33, 0x8d, 0xe1, 0x63, 0x63, 0xd1, 0xae, 0x6b, 0x1e, 0xe3, 0x33, 0xc6,
	0x4d, 0x17, 0x73, 0x62, 0x2e, 0xda, 0x2e, 0x11, 0xb8, 0x6d, 0x7a, 0x8c, 0x86, 0xa9, 0xbc, 0xfe,
	0xf7, 0x84, 0x4d, 0x98, 0x5c, 0x9a, 0xc9, 0x2a, 0x43, 0x1b, 0x13, 0xc6, 0x26, 0x01, 0x31, 0x65,
	0xe5, 0xc6, 0x63, 0x53, 0xd0, 0x19, 0xe1, 0x02, 0xcf, 0xe6, 0xa9, 0xa0, 0xf5, 0xb5, 0x04, 0xb6,
	0xaf, 0xf3, 0xe3, 0x7b, 0x58, 0x60, 0xf8, 0x2f, 0xd8, 0x9a, 0x11, 0x81, 0x93, 0x9b, 0x38, 0x71,
	0x44, 0x55, 0xa5, 0xa9, 0xe8, 0x15, 0x54, 0xcd, 0xb1, 0x51, 0x44, 0xe1, 0x7f, 0x00, 0xce, 0x71,
	0x44, 0xc5, 0x9d, 0xc3, 0xa7, 0x38, 0xf2, 0x1d, 0x8f, 0xc5, 0xa1, 0x50, 0xd7, 0x9a, 0x8a, 0x5e,
	0x42, 0xb5, 0x94, 0xb1, 0x13, 0xa2, 0x9b, 0xe0, 0xd0, 0x00, 0x7b, 0xa9, 0xcc, 0x67, 0xb1, 0x1b,
	0x10, 0x67, 0x8a, 0xf9, 0x94, 0x70, 0xb5, 0xd8, 0x2c, 0xea, 0x5b, 0x68, 0x57, 0x52, 0x3d, 0xc9,
	0x5c, 0x48, 0x02, 0x76, 0x40, 0x65, 0x79, 0x4b, 0xb5, 0xd4, 0x54, 0xf4, 0xea, 0x49, 0xdd, 0x48,
	0xe7, 0x30, 0xf2, 0x39, 0x8c, 0x61, 0xae, 0xe8, 0x6c, 0x3e, 0x7c, 0x6f, 0x14, 0xee, 0x9f, 0x1a,
	0x0a, 0x7a, 0xdd, 0x06, 0x8f, 0x41, 0x99, 0x0b, 0x2c, 0x62, 0xae, 0xae, 0x37, 0x15, 0x7d, 0xe7,
	0x64, 0xdf, 0xf8, 0xe5, 0x35, 0x0d, 0x5b, 0x92, 0x28, 0x13, 0xc1, 0x7f, 0x40, 0x25, 0xf7, 0x20,
	0x52, 0xcb, 0x72, 0xe0, 0x57, 0x00, 0x6a, 0x00, 0x78, 0x53, 0x1c, 0x04, 0x24, 0x9c, 0x90, 0x48,
	0xdd, 0x90, 0xf4, 0x0a, 0x02, 0x6f, 0x01, 0xf0, 0x58, 0x10, 0x60, 0x41, 0x22, 0x1c, 0xa8, 0x9b,
	0xcd, 0xa2, 0x5e, 0x3d, 0x39, 0x34, 0x52, 0xbf, 0x8c, 0xc4, 0x2f, 0x23, 0xf3, 0xcb, 0xe8, 0x32,
	0x1a, 0x76, 0xfe, 0x4f, 0x2e, 0xfc, 0xe5, 0xa9, 0xa1, 0x4f, 0xa8, 0x98, 0xc6, 0xae, 0xe1, 0xb1,
	0x99, 0x99, 0x99, 0x9b, 0xfe, 0x1c, 0x73, 0xff, 0xd6, 0x14, 0x77, 0x73, 0xc2, 0xe5, 0x06, 0x8e,
	0x56, 0xda, 0xc3, 0x11, 0xd8, 0x5b, 0x1e, 0xed, 0xbc, 0xbe, 0x53, 0xe5, 0x0f, 0xde, 0x09, 0x2e,
	0x1b, 0x2c, 0x59, 0xa8, 0x83, 0x9a, 0x74, 0x9c, 0xb3, 0x38, 0xf2, 0x88, 0x43, 0xc3, 0x31, 0x53,
	0x81, 0x9c, 0x74, 0x27, 0xc1, 0x6d, 0x09, 0xf7, 0xc3, 0x31, 0x6b, 0x7d, 0x52, 0xc0, 0xfa, 0x75,
	0xc4, 0xd8, 0xf8, 0x77, 0x92, 0x72, 0x00, 0xca, 0x9c, 0x84, 0x3e, 0x89, 0x64, 0x3a, 0x2a, 0x28,
	0xab, 0xa0, 0x0a, 0x36, 0x68, 0xe8, 0x53, 0x2f, 0xcb, 0x41, 0x11, 0xe5, 0x65, 0xb2, 0x63, 0x9e,
	0x74, 0xe7, 0x6a, 0x49, 0x06, 0x24, 0xab, 0x60, 0x0b, 0x6c, 0x53, 0xee, 0x2c, 0x70, 0x40, 0xd3,
	0x7f, 0x89, 0x34, 0x76, 0x13, 0x55, 0x29, 0xbf, 0x49, 0xb0, 0x24, 0xba, 0x47, 0x9f, 0x15, 0x50,
	0x4e, 0x9d, 0x85, 0x07, 0x00, 0xda, 0xc3, 0xd3, 0xe1, 0xc8, 0x76, 0x46, 0x03, 0xfb, 0xda, 0xea,
	0xf6, 0xcf, 0xfa, 0x56, 0xaf, 0x56, 0x80, 0x7b, 0xe0, 0xaf, 0x0c, 0xbf, 0xb1, 0x50, 0x0a, 0x2a,
	0x2b, 0x20, 0xb2, 0xde, 0x5a, 0xdd, 0xa1, 0xd5, 0xab, 0xad, 0xc1, 0x7d, 0xb0, 0x9b, 0x81, 0xef,
	0xec, 0x73, 0xc7, 0xb6, 0xd0, 0x8d, 0x85, 0x6a, 0x45, 0x78, 0x08, 0xf6, 0xf3, 0x06, 0x57, 0x43,
	0xcb, 0xb1, 0xde, 0x0f, 0xad, 0x81, 0xdd, 0xbf, 0x1a, 0xd4, 0x4a, 0x50, 0x03, 0xf5, 0x8c, 0xea,
	0x5e, 0x9c, 0x5e, 0x5e, 0x5a, 0x83, 0x73, 0xcb, 0x39, 0xbb, 0x42, 0xce, 0x19, 0x3a, 0x1d, 0xf5,
	0x6a, 0xeb, 0x9d, 0xde, 0xc3, 0xb3, 0xa6, 0x3c, 0x3e, 0x6b, 0xca, 0x8f, 0x67, 0x4d, 0xb9, 0x7f,
	0xd1, 0x0a, 0x8f, 0x2f, 0x5a, 0xe1, 0xdb, 0x8b, 0x56, 0xf8, 0x70, 0xb4, 0x12, 0x85, 0x2c, 0xa8,
	0x01, 0xbe, 0x23, 0x51, 0x5e, 0x98, 0x1f, 0x93, 0x2f, 0x85, 0x8c, 0x84, 0x5b, 0x96, 0xde, 0xbe,
	0xf9, 0x19, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x47, 0xc3, 0xa8, 0x44, 0x04, 0x00, 0x00,
}

func (m *PublishedData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishedData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishedData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataSourceInfo) > 0 {
		i -= len(m.DataSourceInfo)
		copy(dAtA[i:], m.DataSourceInfo)
		i = encodeVarintPublishedData(dAtA, i, uint64(len(m.DataSourceInfo)))
		i--
		dAtA[i] = 0x52
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ChallengeTimestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ChallengeTimestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPublishedData(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x4a
	if len(m.Collateral) > 0 {
		for iNdEx := len(m.Collateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublishedData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Challenger) > 0 {
		i -= len(m.Challenger)
		copy(dAtA[i:], m.Challenger)
		i = encodeVarintPublishedData(dAtA, i, uint64(len(m.Challenger)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Publisher) > 0 {
		i -= len(m.Publisher)
		copy(dAtA[i:], m.Publisher)
		i = encodeVarintPublishedData(dAtA, i, uint64(len(m.Publisher)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintPublishedData(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintPublishedData(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	if len(m.ShardDoubleHashes) > 0 {
		for iNdEx := len(m.ShardDoubleHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShardDoubleHashes[iNdEx])
			copy(dAtA[i:], m.ShardDoubleHashes[iNdEx])
			i = encodeVarintPublishedData(dAtA, i, uint64(len(m.ShardDoubleHashes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ParityShardCount != 0 {
		i = encodeVarintPublishedData(dAtA, i, uint64(m.ParityShardCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MetadataUri) > 0 {
		i -= len(m.MetadataUri)
		copy(dAtA[i:], m.MetadataUri)
		i = encodeVarintPublishedData(dAtA, i, uint64(len(m.MetadataUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsValidData {
		i--
		if m.IsValidData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Proofs) > 0 {
		for iNdEx := len(m.Proofs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Proofs[iNdEx])
			copy(dAtA[i:], m.Proofs[iNdEx])
			i = encodeVarintPublishedData(dAtA, i, uint64(len(m.Proofs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Indices) > 0 {
		dAtA4 := make([]byte, len(m.Indices)*10)
		var j3 int
		for _, num1 := range m.Indices {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintPublishedData(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPublishedData(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MetadataUri) > 0 {
		i -= len(m.MetadataUri)
		copy(dAtA[i:], m.MetadataUri)
		i = encodeVarintPublishedData(dAtA, i, uint64(len(m.MetadataUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublishedData(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublishedData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PublishedData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetadataUri)
	if l > 0 {
		n += 1 + l + sovPublishedData(uint64(l))
	}
	if m.ParityShardCount != 0 {
		n += 1 + sovPublishedData(uint64(m.ParityShardCount))
	}
	if len(m.ShardDoubleHashes) > 0 {
		for _, b := range m.ShardDoubleHashes {
			l = len(b)
			n += 1 + l + sovPublishedData(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovPublishedData(uint64(l))
	if m.Status != 0 {
		n += 1 + sovPublishedData(uint64(m.Status))
	}
	l = len(m.Publisher)
	if l > 0 {
		n += 1 + l + sovPublishedData(uint64(l))
	}
	l = len(m.Challenger)
	if l > 0 {
		n += 1 + l + sovPublishedData(uint64(l))
	}
	if len(m.Collateral) > 0 {
		for _, e := range m.Collateral {
			l = e.Size()
			n += 1 + l + sovPublishedData(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ChallengeTimestamp)
	n += 1 + l + sovPublishedData(uint64(l))
	l = len(m.DataSourceInfo)
	if l > 0 {
		n += 1 + l + sovPublishedData(uint64(l))
	}
	return n
}

func (m *Proof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetadataUri)
	if l > 0 {
		n += 1 + l + sovPublishedData(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPublishedData(uint64(l))
	}
	if len(m.Indices) > 0 {
		l = 0
		for _, e := range m.Indices {
			l += sovPublishedData(uint64(e))
		}
		n += 1 + sovPublishedData(uint64(l)) + l
	}
	if len(m.Proofs) > 0 {
		for _, b := range m.Proofs {
			l = len(b)
			n += 1 + l + sovPublishedData(uint64(l))
		}
	}
	if m.IsValidData {
		n += 2
	}
	return n
}

func sovPublishedData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublishedData(x uint64) (n int) {
	return sovPublishedData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PublishedData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublishedData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishedData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishedData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublishedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublishedData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublishedData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParityShardCount", wireType)
			}
			m.ParityShardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublishedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParityShardCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardDoubleHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublishedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPublishedData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPublishedData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardDoubleHashes = append(m.ShardDoubleHashes, make([]byte, postIndex-iNdEx))
			copy(m.ShardDoubleHashes[len(m.ShardDoubleHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublishedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublishedData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublishedData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublishedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publisher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublishedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublishedData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublishedData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publisher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenger", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublishedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublishedData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublishedData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenger = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublishedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublishedData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublishedData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = append(m.Collateral, types.Coin{})
			if err := m.Collateral[len(m.Collateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublishedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublishedData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublishedData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ChallengeTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSourceInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublishedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublishedData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublishedData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSourceInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublishedData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPublishedData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublishedData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublishedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublishedData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublishedData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublishedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublishedData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublishedData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublishedData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Indices = append(m.Indices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublishedData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublishedData
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublishedData
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Indices) == 0 {
					m.Indices = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublishedData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Indices = append(m.Indices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Indices", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proofs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublishedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPublishedData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPublishedData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proofs = append(m.Proofs, make([]byte, postIndex-iNdEx))
			copy(m.Proofs[len(m.Proofs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValidData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublishedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValidData = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPublishedData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPublishedData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublishedData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublishedData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublishedData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublishedData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublishedData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublishedData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublishedData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublishedData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublishedData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublishedData = fmt.Errorf("proto: unexpected end of group")
)
