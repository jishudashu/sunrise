// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/liquidityincentive/v1/bribe.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Bribe
type Bribe struct {
	EpochId       uint64     `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	PoolId        uint64     `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Amount        types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	ClaimedAmount types.Coin `protobuf:"bytes,4,opt,name=claimed_amount,json=claimedAmount,proto3" json:"claimed_amount"`
}

func (m *Bribe) Reset()         { *m = Bribe{} }
func (m *Bribe) String() string { return proto.CompactTextString(m) }
func (*Bribe) ProtoMessage()    {}
func (*Bribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_2269523b87017629, []int{0}
}
func (m *Bribe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bribe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bribe.Merge(m, src)
}
func (m *Bribe) XXX_Size() int {
	return m.Size()
}
func (m *Bribe) XXX_DiscardUnknown() {
	xxx_messageInfo_Bribe.DiscardUnknown(m)
}

var xxx_messageInfo_Bribe proto.InternalMessageInfo

func (m *Bribe) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *Bribe) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *Bribe) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *Bribe) GetClaimedAmount() types.Coin {
	if m != nil {
		return m.ClaimedAmount
	}
	return types.Coin{}
}

// Bribe
type UnclaimedBribe struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	EpochId uint64 `protobuf:"varint,2,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	PoolId  uint64 `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Weight  string `protobuf:"bytes,4,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *UnclaimedBribe) Reset()         { *m = UnclaimedBribe{} }
func (m *UnclaimedBribe) String() string { return proto.CompactTextString(m) }
func (*UnclaimedBribe) ProtoMessage()    {}
func (*UnclaimedBribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_2269523b87017629, []int{1}
}
func (m *UnclaimedBribe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnclaimedBribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnclaimedBribe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnclaimedBribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnclaimedBribe.Merge(m, src)
}
func (m *UnclaimedBribe) XXX_Size() int {
	return m.Size()
}
func (m *UnclaimedBribe) XXX_DiscardUnknown() {
	xxx_messageInfo_UnclaimedBribe.DiscardUnknown(m)
}

var xxx_messageInfo_UnclaimedBribe proto.InternalMessageInfo

func (m *UnclaimedBribe) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UnclaimedBribe) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *UnclaimedBribe) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *UnclaimedBribe) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func init() {
	proto.RegisterType((*Bribe)(nil), "sunrise.liquidityincentive.v1.Bribe")
	proto.RegisterType((*UnclaimedBribe)(nil), "sunrise.liquidityincentive.v1.UnclaimedBribe")
}

func init() {
	proto.RegisterFile("sunrise/liquidityincentive/v1/bribe.proto", fileDescriptor_2269523b87017629)
}

var fileDescriptor_2269523b87017629 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x8d, 0xdb, 0xbe, 0xf4, 0xd5, 0x4f, 0xaf, 0x43, 0x84, 0x44, 0x5b, 0x89, 0x50, 0x75, 0x40,
	0x65, 0x20, 0x56, 0x61, 0x40, 0x62, 0x23, 0x20, 0xa4, 0xae, 0x11, 0x2c, 0x2c, 0x55, 0x62, 0x5b,
	0xa9, 0xa5, 0xc4, 0x0e, 0xb1, 0x53, 0xe8, 0x0f, 0x30, 0xf3, 0x31, 0x8c, 0x7c, 0x40, 0xc7, 0x8a,
	0x89, 0x09, 0xa1, 0xf6, 0x47, 0x50, 0x62, 0x77, 0xa8, 0x00, 0x89, 0xcd, 0xe7, 0x9e, 0x7b, 0xee,
	0x3d, 0x47, 0xd7, 0xf0, 0x50, 0x16, 0x3c, 0x67, 0x92, 0xa2, 0x84, 0xdd, 0x15, 0x8c, 0x30, 0x35,
	0x67, 0x1c, 0x53, 0xae, 0xd8, 0x8c, 0xa2, 0xd9, 0x08, 0x45, 0x39, 0x8b, 0xa8, 0x97, 0xe5, 0x42,
	0x09, 0x67, 0xcf, 0xb4, 0x7a, 0x5f, 0x5b, 0xbd, 0xd9, 0xa8, 0xe7, 0x62, 0x21, 0x53, 0x21, 0x51,
	0x14, 0xca, 0x52, 0x1a, 0x51, 0x15, 0x8e, 0x10, 0x16, 0x8c, 0x6b, 0x79, 0xaf, 0xab, 0xf9, 0x49,
	0x85, 0x90, 0x06, 0x86, 0xda, 0x89, 0x45, 0x2c, 0x74, 0xbd, 0x7c, 0xe9, 0xea, 0xe0, 0x05, 0xc0,
	0x3f, 0x7e, 0xb9, 0xdf, 0xe9, 0xc2, 0xbf, 0x34, 0x13, 0x78, 0x3a, 0x61, 0xa4, 0x03, 0xfa, 0x60,
	0xd8, 0x08, 0x9a, 0x15, 0x1e, 0x13, 0x67, 0x17, 0x36, 0x33, 0x21, 0x92, 0x92, 0xa9, 0x55, 0x8c,
	0x5d, 0xc2, 0x31, 0x71, 0x4e, 0xa1, 0x1d, 0xa6, 0xa2, 0xe0, 0xaa, 0x53, 0xef, 0x83, 0xe1, 0xbf,
	0xe3, 0xae, 0x67, 0x56, 0x96, 0xfe, 0x3c, 0xe3, 0xcf, 0xbb, 0x10, 0x8c, 0xfb, 0x8d, 0xc5, 0xfb,
	0xbe, 0x15, 0x98, 0x76, 0xe7, 0x0a, 0xb6, 0x71, 0x12, 0xb2, 0x94, 0x92, 0x89, 0x19, 0xd0, 0xf8,
	0xdd, 0x80, 0xff, 0x46, 0x76, 0x5e, 0xa9, 0x06, 0x8f, 0x00, 0xb6, 0x6f, 0xb8, 0xa9, 0xe9, 0x1c,
	0x1d, 0xd8, 0x0c, 0x09, 0xc9, 0xa9, 0x94, 0x55, 0x8c, 0x56, 0xb0, 0x81, 0x5b, 0x09, 0x6b, 0x3f,
	0x26, 0xac, 0x6f, 0x25, 0x3c, 0x80, 0xf6, 0x3d, 0x65, 0xf1, 0x54, 0x1b, 0x6c, 0xf9, 0xed, 0xd7,
	0xe7, 0x23, 0x68, 0x3c, 0x5e, 0x52, 0x1c, 0x18, 0xd6, 0xbf, 0x5e, 0xac, 0x5c, 0xb0, 0x5c, 0xb9,
	0xe0, 0x63, 0xe5, 0x82, 0xa7, 0xb5, 0x6b, 0x2d, 0xd7, 0xae, 0xf5, 0xb6, 0x76, 0xad, 0xdb, 0xb3,
	0x98, 0xa9, 0x69, 0x11, 0x79, 0x58, 0xa4, 0xc8, 0x1c, 0x37, 0x09, 0xe7, 0x34, 0xdf, 0x00, 0xf4,
	0xf0, 0xdd, 0xb7, 0x50, 0xf3, 0x8c, 0xca, 0xc8, 0xae, 0x8e, 0x74, 0xf2, 0x19, 0x00, 0x00, 0xff,
	0xff, 0xed, 0xd9, 0x1b, 0xd6, 0x41, 0x02, 0x00, 0x00,
}

func (m *Bribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bribe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bribe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ClaimedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBribe(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBribe(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PoolId != 0 {
		i = encodeVarintBribe(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochId != 0 {
		i = encodeVarintBribe(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnclaimedBribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnclaimedBribe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnclaimedBribe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Weight) > 0 {
		i -= len(m.Weight)
		copy(dAtA[i:], m.Weight)
		i = encodeVarintBribe(dAtA, i, uint64(len(m.Weight)))
		i--
		dAtA[i] = 0x22
	}
	if m.PoolId != 0 {
		i = encodeVarintBribe(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if m.EpochId != 0 {
		i = encodeVarintBribe(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBribe(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBribe(dAtA []byte, offset int, v uint64) int {
	offset -= sovBribe(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Bribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovBribe(uint64(m.EpochId))
	}
	if m.PoolId != 0 {
		n += 1 + sovBribe(uint64(m.PoolId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovBribe(uint64(l))
	l = m.ClaimedAmount.Size()
	n += 1 + l + sovBribe(uint64(l))
	return n
}

func (m *UnclaimedBribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBribe(uint64(l))
	}
	if m.EpochId != 0 {
		n += 1 + sovBribe(uint64(m.EpochId))
	}
	if m.PoolId != 0 {
		n += 1 + sovBribe(uint64(m.PoolId))
	}
	l = len(m.Weight)
	if l > 0 {
		n += 1 + l + sovBribe(uint64(l))
	}
	return n
}

func sovBribe(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBribe(x uint64) (n int) {
	return sovBribe(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnclaimedBribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnclaimedBribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnclaimedBribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBribe(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBribe
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBribe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBribe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBribe
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBribe
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBribe
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBribe        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBribe          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBribe = fmt.Errorf("proto: unexpected end of group")
)
